Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONTINUE
    GLOBAL
    LOCAL
    MOD

Grammar

Rule 0     S' -> inicio
Rule 1     inicio -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> asignacion
Rule 5     instruccion -> declareFunction
Rule 6     instruccion -> callFunction
Rule 7     instruccion -> condicional
Rule 8     instruccion -> whileST
Rule 9     instruccion -> forST
Rule 10    instruccion -> struct
Rule 11    declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON
Rule 12    declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON
Rule 13    declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON
Rule 14    declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON
Rule 15    returnValue -> RETURN expresion SEMICOLON
Rule 16    returnValue -> RETURN SEMICOLON
Rule 17    lista_parametros -> lista_parametros COMMA IDENTIFICADOR
Rule 18    lista_parametros -> lista_parametros COMMA IDENTIFICADOR SUFIX tipo_dato
Rule 19    lista_parametros -> IDENTIFICADOR SUFIX tipo_dato
Rule 20    lista_parametros -> IDENTIFICADOR
Rule 21    asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON
Rule 22    asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON
Rule 23    tipo_dato -> INT64
Rule 24    tipo_dato -> FLOAT64
Rule 25    tipo_dato -> BOOL
Rule 26    tipo_dato -> CHAR
Rule 27    tipo_dato -> STRING
Rule 28    tipo_dato -> ARRAY
Rule 29    tipo_dato -> NOTHING
Rule 30    callFunction -> IDENTIFICADOR LPAR RPAR SEMICOLON
Rule 31    callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON
Rule 32    condicional -> IF expresion END SEMICOLON
Rule 33    condicional -> IF expresion elseifList END SEMICOLON
Rule 34    condicional -> IF expresion elseifList ELSE END SEMICOLON
Rule 35    elseifList -> elseifList ELSEIF expresion
Rule 36    elseifList -> ELSEIF expresion
Rule 37    whileST -> WHILE expresion END SEMICOLON
Rule 38    forST -> FOR IDENTIFICADOR IN expresion END SEMICOLON
Rule 39    lista_expresion -> lista_expresion COMMA expresion
Rule 40    lista_expresion -> expresion
Rule 41    struct -> MUTABLE STRUCT IDENTIFICADOR END SEMICOLON
Rule 42    struct -> STRUCT IDENTIFICADOR END SEMICOLON
Rule 43    expresion -> RESTA expresion
Rule 44    expresion -> NOT expresion
Rule 45    expresion -> expresion AND expresion
Rule 46    expresion -> expresion OR expresion
Rule 47    expresion -> expresion SUM expresion
Rule 48    expresion -> expresion RESTA expresion
Rule 49    expresion -> expresion MUL expresion
Rule 50    expresion -> expresion DIV expresion
Rule 51    expresion -> expresion POT expresion
Rule 52    expresion -> expresion DEQUALS expresion
Rule 53    expresion -> expresion DIFF expresion
Rule 54    expresion -> expresion GREATER expresion
Rule 55    expresion -> expresion LESSTHAN expresion
Rule 56    expresion -> expresion GEQ expresion
Rule 57    expresion -> expresion LEQ expresion
Rule 58    expresion -> primitivas
Rule 59    primitivas -> ENTERO
Rule 60    primitivas -> DECIMAL
Rule 61    primitivas -> FALSE
Rule 62    primitivas -> TRUE
Rule 63    primitivas -> STRINGLITERAL
Rule 64    primitivas -> CHARLITERAL
Rule 65    primitivas -> NOTHING
Rule 66    primitivas -> BRACKETA BRACKETC
Rule 67    primitivas -> BRACKETA items BRACKETC
Rule 68    items -> items COMMA expresion
Rule 69    items -> expresion

Terminals, with rules where they appear

AND                  : 45
ARRAY                : 28
BOOL                 : 25
BRACKETA             : 66 67
BRACKETC             : 66 67
BREAK                : 
CHAR                 : 26
CHARLITERAL          : 64
COMMA                : 17 18 39 68
CONTINUE             : 
DECIMAL              : 60
DEQUALS              : 52
DIFF                 : 53
DIV                  : 50
ELSE                 : 34
ELSEIF               : 35 36
END                  : 11 12 13 14 32 33 34 37 38 41 42
ENTERO               : 59
EQUALS               : 21 22
FALSE                : 61
FLOAT64              : 24
FOR                  : 38
FUNCTION             : 11 12 13 14
GEQ                  : 56
GLOBAL               : 
GREATER              : 54
IDENTIFICADOR        : 11 12 13 14 17 18 19 20 21 22 30 31 38 41 42
IF                   : 32 33 34
IN                   : 38
INT64                : 23
LEQ                  : 57
LESSTHAN             : 55
LOCAL                : 
LPAR                 : 11 12 13 14 30 31
MOD                  : 
MUL                  : 49
MUTABLE              : 41
NOT                  : 44
NOTHING              : 29 65
OR                   : 46
POT                  : 51
RESTA                : 43 48
RETURN               : 15 16
RPAR                 : 11 12 13 14 30 31
SEMICOLON            : 11 12 13 14 15 16 21 22 30 31 32 33 34 37 38 41 42
STRING               : 27
STRINGLITERAL        : 63
STRUCT               : 41 42
SUFIX                : 18 19 22
SUM                  : 47
TRUE                 : 62
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

asignacion           : 4
callFunction         : 6
condicional          : 7
declareFunction      : 5
elseifList           : 33 34 35
expresion            : 15 21 22 32 33 34 35 36 37 38 39 40 43 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 68 69
forST                : 9
inicio               : 0
instruccion          : 2 3
instrucciones        : 1 2
items                : 67 68
lista_expresion      : 31 39
lista_parametros     : 11 12 17 18
primitivas           : 58
returnValue          : 11 13
struct               : 10
tipo_dato            : 18 19 22
whileST              : 8

Parsing method: LALR

state 0

    (0) S' -> . inicio
    (1) inicio -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . asignacion
    (5) instruccion -> . declareFunction
    (6) instruccion -> . callFunction
    (7) instruccion -> . condicional
    (8) instruccion -> . whileST
    (9) instruccion -> . forST
    (10) instruccion -> . struct
    (21) asignacion -> . IDENTIFICADOR EQUALS expresion SEMICOLON
    (22) asignacion -> . IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON
    (11) declareFunction -> . FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON
    (12) declareFunction -> . FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON
    (13) declareFunction -> . FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON
    (14) declareFunction -> . FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON
    (30) callFunction -> . IDENTIFICADOR LPAR RPAR SEMICOLON
    (31) callFunction -> . IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON
    (32) condicional -> . IF expresion END SEMICOLON
    (33) condicional -> . IF expresion elseifList END SEMICOLON
    (34) condicional -> . IF expresion elseifList ELSE END SEMICOLON
    (37) whileST -> . WHILE expresion END SEMICOLON
    (38) forST -> . FOR IDENTIFICADOR IN expresion END SEMICOLON
    (41) struct -> . MUTABLE STRUCT IDENTIFICADOR END SEMICOLON
    (42) struct -> . STRUCT IDENTIFICADOR END SEMICOLON

    IDENTIFICADOR   shift and go to state 11
    FUNCTION        shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    MUTABLE         shift and go to state 16
    STRUCT          shift and go to state 17

    inicio                         shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    asignacion                     shift and go to state 4
    declareFunction                shift and go to state 5
    callFunction                   shift and go to state 6
    condicional                    shift and go to state 7
    whileST                        shift and go to state 8
    forST                          shift and go to state 9
    struct                         shift and go to state 10

state 1

    (0) S' -> inicio .



state 2

    (1) inicio -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . asignacion
    (5) instruccion -> . declareFunction
    (6) instruccion -> . callFunction
    (7) instruccion -> . condicional
    (8) instruccion -> . whileST
    (9) instruccion -> . forST
    (10) instruccion -> . struct
    (21) asignacion -> . IDENTIFICADOR EQUALS expresion SEMICOLON
    (22) asignacion -> . IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON
    (11) declareFunction -> . FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON
    (12) declareFunction -> . FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON
    (13) declareFunction -> . FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON
    (14) declareFunction -> . FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON
    (30) callFunction -> . IDENTIFICADOR LPAR RPAR SEMICOLON
    (31) callFunction -> . IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON
    (32) condicional -> . IF expresion END SEMICOLON
    (33) condicional -> . IF expresion elseifList END SEMICOLON
    (34) condicional -> . IF expresion elseifList ELSE END SEMICOLON
    (37) whileST -> . WHILE expresion END SEMICOLON
    (38) forST -> . FOR IDENTIFICADOR IN expresion END SEMICOLON
    (41) struct -> . MUTABLE STRUCT IDENTIFICADOR END SEMICOLON
    (42) struct -> . STRUCT IDENTIFICADOR END SEMICOLON

    $end            reduce using rule 1 (inicio -> instrucciones .)
    IDENTIFICADOR   shift and go to state 11
    FUNCTION        shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    MUTABLE         shift and go to state 16
    STRUCT          shift and go to state 17

    instruccion                    shift and go to state 18
    asignacion                     shift and go to state 4
    declareFunction                shift and go to state 5
    callFunction                   shift and go to state 6
    condicional                    shift and go to state 7
    whileST                        shift and go to state 8
    forST                          shift and go to state 9
    struct                         shift and go to state 10

state 3

    (3) instrucciones -> instruccion .

    IDENTIFICADOR   reduce using rule 3 (instrucciones -> instruccion .)
    FUNCTION        reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    MUTABLE         reduce using rule 3 (instrucciones -> instruccion .)
    STRUCT          reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> asignacion .

    IDENTIFICADOR   reduce using rule 4 (instruccion -> asignacion .)
    FUNCTION        reduce using rule 4 (instruccion -> asignacion .)
    IF              reduce using rule 4 (instruccion -> asignacion .)
    WHILE           reduce using rule 4 (instruccion -> asignacion .)
    FOR             reduce using rule 4 (instruccion -> asignacion .)
    MUTABLE         reduce using rule 4 (instruccion -> asignacion .)
    STRUCT          reduce using rule 4 (instruccion -> asignacion .)
    $end            reduce using rule 4 (instruccion -> asignacion .)


state 5

    (5) instruccion -> declareFunction .

    IDENTIFICADOR   reduce using rule 5 (instruccion -> declareFunction .)
    FUNCTION        reduce using rule 5 (instruccion -> declareFunction .)
    IF              reduce using rule 5 (instruccion -> declareFunction .)
    WHILE           reduce using rule 5 (instruccion -> declareFunction .)
    FOR             reduce using rule 5 (instruccion -> declareFunction .)
    MUTABLE         reduce using rule 5 (instruccion -> declareFunction .)
    STRUCT          reduce using rule 5 (instruccion -> declareFunction .)
    $end            reduce using rule 5 (instruccion -> declareFunction .)


state 6

    (6) instruccion -> callFunction .

    IDENTIFICADOR   reduce using rule 6 (instruccion -> callFunction .)
    FUNCTION        reduce using rule 6 (instruccion -> callFunction .)
    IF              reduce using rule 6 (instruccion -> callFunction .)
    WHILE           reduce using rule 6 (instruccion -> callFunction .)
    FOR             reduce using rule 6 (instruccion -> callFunction .)
    MUTABLE         reduce using rule 6 (instruccion -> callFunction .)
    STRUCT          reduce using rule 6 (instruccion -> callFunction .)
    $end            reduce using rule 6 (instruccion -> callFunction .)


state 7

    (7) instruccion -> condicional .

    IDENTIFICADOR   reduce using rule 7 (instruccion -> condicional .)
    FUNCTION        reduce using rule 7 (instruccion -> condicional .)
    IF              reduce using rule 7 (instruccion -> condicional .)
    WHILE           reduce using rule 7 (instruccion -> condicional .)
    FOR             reduce using rule 7 (instruccion -> condicional .)
    MUTABLE         reduce using rule 7 (instruccion -> condicional .)
    STRUCT          reduce using rule 7 (instruccion -> condicional .)
    $end            reduce using rule 7 (instruccion -> condicional .)


state 8

    (8) instruccion -> whileST .

    IDENTIFICADOR   reduce using rule 8 (instruccion -> whileST .)
    FUNCTION        reduce using rule 8 (instruccion -> whileST .)
    IF              reduce using rule 8 (instruccion -> whileST .)
    WHILE           reduce using rule 8 (instruccion -> whileST .)
    FOR             reduce using rule 8 (instruccion -> whileST .)
    MUTABLE         reduce using rule 8 (instruccion -> whileST .)
    STRUCT          reduce using rule 8 (instruccion -> whileST .)
    $end            reduce using rule 8 (instruccion -> whileST .)


state 9

    (9) instruccion -> forST .

    IDENTIFICADOR   reduce using rule 9 (instruccion -> forST .)
    FUNCTION        reduce using rule 9 (instruccion -> forST .)
    IF              reduce using rule 9 (instruccion -> forST .)
    WHILE           reduce using rule 9 (instruccion -> forST .)
    FOR             reduce using rule 9 (instruccion -> forST .)
    MUTABLE         reduce using rule 9 (instruccion -> forST .)
    STRUCT          reduce using rule 9 (instruccion -> forST .)
    $end            reduce using rule 9 (instruccion -> forST .)


state 10

    (10) instruccion -> struct .

    IDENTIFICADOR   reduce using rule 10 (instruccion -> struct .)
    FUNCTION        reduce using rule 10 (instruccion -> struct .)
    IF              reduce using rule 10 (instruccion -> struct .)
    WHILE           reduce using rule 10 (instruccion -> struct .)
    FOR             reduce using rule 10 (instruccion -> struct .)
    MUTABLE         reduce using rule 10 (instruccion -> struct .)
    STRUCT          reduce using rule 10 (instruccion -> struct .)
    $end            reduce using rule 10 (instruccion -> struct .)


state 11

    (21) asignacion -> IDENTIFICADOR . EQUALS expresion SEMICOLON
    (22) asignacion -> IDENTIFICADOR . EQUALS expresion SUFIX tipo_dato SEMICOLON
    (30) callFunction -> IDENTIFICADOR . LPAR RPAR SEMICOLON
    (31) callFunction -> IDENTIFICADOR . LPAR lista_expresion RPAR SEMICOLON

    EQUALS          shift and go to state 19
    LPAR            shift and go to state 20


state 12

    (11) declareFunction -> FUNCTION . IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON
    (12) declareFunction -> FUNCTION . IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON
    (13) declareFunction -> FUNCTION . IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON
    (14) declareFunction -> FUNCTION . IDENTIFICADOR LPAR RPAR END SEMICOLON

    IDENTIFICADOR   shift and go to state 21


state 13

    (32) condicional -> IF . expresion END SEMICOLON
    (33) condicional -> IF . expresion elseifList END SEMICOLON
    (34) condicional -> IF . expresion elseifList ELSE END SEMICOLON
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 22
    primitivas                     shift and go to state 25

state 14

    (37) whileST -> WHILE . expresion END SEMICOLON
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 34
    primitivas                     shift and go to state 25

state 15

    (38) forST -> FOR . IDENTIFICADOR IN expresion END SEMICOLON

    IDENTIFICADOR   shift and go to state 35


state 16

    (41) struct -> MUTABLE . STRUCT IDENTIFICADOR END SEMICOLON

    STRUCT          shift and go to state 36


state 17

    (42) struct -> STRUCT . IDENTIFICADOR END SEMICOLON

    IDENTIFICADOR   shift and go to state 37


state 18

    (2) instrucciones -> instrucciones instruccion .

    IDENTIFICADOR   reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNCTION        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    MUTABLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    STRUCT          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 19

    (21) asignacion -> IDENTIFICADOR EQUALS . expresion SEMICOLON
    (22) asignacion -> IDENTIFICADOR EQUALS . expresion SUFIX tipo_dato SEMICOLON
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 38
    primitivas                     shift and go to state 25

state 20

    (30) callFunction -> IDENTIFICADOR LPAR . RPAR SEMICOLON
    (31) callFunction -> IDENTIFICADOR LPAR . lista_expresion RPAR SEMICOLON
    (39) lista_expresion -> . lista_expresion COMMA expresion
    (40) lista_expresion -> . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RPAR            shift and go to state 39
    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    lista_expresion                shift and go to state 40
    expresion                      shift and go to state 41
    primitivas                     shift and go to state 25

state 21

    (11) declareFunction -> FUNCTION IDENTIFICADOR . LPAR lista_parametros RPAR returnValue END SEMICOLON
    (12) declareFunction -> FUNCTION IDENTIFICADOR . LPAR lista_parametros RPAR END SEMICOLON
    (13) declareFunction -> FUNCTION IDENTIFICADOR . LPAR RPAR returnValue END SEMICOLON
    (14) declareFunction -> FUNCTION IDENTIFICADOR . LPAR RPAR END SEMICOLON

    LPAR            shift and go to state 42


state 22

    (32) condicional -> IF expresion . END SEMICOLON
    (33) condicional -> IF expresion . elseifList END SEMICOLON
    (34) condicional -> IF expresion . elseifList ELSE END SEMICOLON
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion
    (35) elseifList -> . elseifList ELSEIF expresion
    (36) elseifList -> . ELSEIF expresion

    END             shift and go to state 43
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    DEQUALS         shift and go to state 52
    DIFF            shift and go to state 53
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57
    ELSEIF          shift and go to state 58

    elseifList                     shift and go to state 44

state 23

    (43) expresion -> RESTA . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 59
    primitivas                     shift and go to state 25

state 24

    (44) expresion -> NOT . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 60
    primitivas                     shift and go to state 25

state 25

    (58) expresion -> primitivas .

    END             reduce using rule 58 (expresion -> primitivas .)
    AND             reduce using rule 58 (expresion -> primitivas .)
    OR              reduce using rule 58 (expresion -> primitivas .)
    SUM             reduce using rule 58 (expresion -> primitivas .)
    RESTA           reduce using rule 58 (expresion -> primitivas .)
    MUL             reduce using rule 58 (expresion -> primitivas .)
    DIV             reduce using rule 58 (expresion -> primitivas .)
    POT             reduce using rule 58 (expresion -> primitivas .)
    DEQUALS         reduce using rule 58 (expresion -> primitivas .)
    DIFF            reduce using rule 58 (expresion -> primitivas .)
    GREATER         reduce using rule 58 (expresion -> primitivas .)
    LESSTHAN        reduce using rule 58 (expresion -> primitivas .)
    GEQ             reduce using rule 58 (expresion -> primitivas .)
    LEQ             reduce using rule 58 (expresion -> primitivas .)
    ELSEIF          reduce using rule 58 (expresion -> primitivas .)
    SEMICOLON       reduce using rule 58 (expresion -> primitivas .)
    SUFIX           reduce using rule 58 (expresion -> primitivas .)
    RPAR            reduce using rule 58 (expresion -> primitivas .)
    COMMA           reduce using rule 58 (expresion -> primitivas .)
    BRACKETC        reduce using rule 58 (expresion -> primitivas .)
    ELSE            reduce using rule 58 (expresion -> primitivas .)


state 26

    (59) primitivas -> ENTERO .

    END             reduce using rule 59 (primitivas -> ENTERO .)
    AND             reduce using rule 59 (primitivas -> ENTERO .)
    OR              reduce using rule 59 (primitivas -> ENTERO .)
    SUM             reduce using rule 59 (primitivas -> ENTERO .)
    RESTA           reduce using rule 59 (primitivas -> ENTERO .)
    MUL             reduce using rule 59 (primitivas -> ENTERO .)
    DIV             reduce using rule 59 (primitivas -> ENTERO .)
    POT             reduce using rule 59 (primitivas -> ENTERO .)
    DEQUALS         reduce using rule 59 (primitivas -> ENTERO .)
    DIFF            reduce using rule 59 (primitivas -> ENTERO .)
    GREATER         reduce using rule 59 (primitivas -> ENTERO .)
    LESSTHAN        reduce using rule 59 (primitivas -> ENTERO .)
    GEQ             reduce using rule 59 (primitivas -> ENTERO .)
    LEQ             reduce using rule 59 (primitivas -> ENTERO .)
    ELSEIF          reduce using rule 59 (primitivas -> ENTERO .)
    SEMICOLON       reduce using rule 59 (primitivas -> ENTERO .)
    SUFIX           reduce using rule 59 (primitivas -> ENTERO .)
    RPAR            reduce using rule 59 (primitivas -> ENTERO .)
    COMMA           reduce using rule 59 (primitivas -> ENTERO .)
    BRACKETC        reduce using rule 59 (primitivas -> ENTERO .)
    ELSE            reduce using rule 59 (primitivas -> ENTERO .)


state 27

    (60) primitivas -> DECIMAL .

    END             reduce using rule 60 (primitivas -> DECIMAL .)
    AND             reduce using rule 60 (primitivas -> DECIMAL .)
    OR              reduce using rule 60 (primitivas -> DECIMAL .)
    SUM             reduce using rule 60 (primitivas -> DECIMAL .)
    RESTA           reduce using rule 60 (primitivas -> DECIMAL .)
    MUL             reduce using rule 60 (primitivas -> DECIMAL .)
    DIV             reduce using rule 60 (primitivas -> DECIMAL .)
    POT             reduce using rule 60 (primitivas -> DECIMAL .)
    DEQUALS         reduce using rule 60 (primitivas -> DECIMAL .)
    DIFF            reduce using rule 60 (primitivas -> DECIMAL .)
    GREATER         reduce using rule 60 (primitivas -> DECIMAL .)
    LESSTHAN        reduce using rule 60 (primitivas -> DECIMAL .)
    GEQ             reduce using rule 60 (primitivas -> DECIMAL .)
    LEQ             reduce using rule 60 (primitivas -> DECIMAL .)
    ELSEIF          reduce using rule 60 (primitivas -> DECIMAL .)
    SEMICOLON       reduce using rule 60 (primitivas -> DECIMAL .)
    SUFIX           reduce using rule 60 (primitivas -> DECIMAL .)
    RPAR            reduce using rule 60 (primitivas -> DECIMAL .)
    COMMA           reduce using rule 60 (primitivas -> DECIMAL .)
    BRACKETC        reduce using rule 60 (primitivas -> DECIMAL .)
    ELSE            reduce using rule 60 (primitivas -> DECIMAL .)


state 28

    (61) primitivas -> FALSE .

    END             reduce using rule 61 (primitivas -> FALSE .)
    AND             reduce using rule 61 (primitivas -> FALSE .)
    OR              reduce using rule 61 (primitivas -> FALSE .)
    SUM             reduce using rule 61 (primitivas -> FALSE .)
    RESTA           reduce using rule 61 (primitivas -> FALSE .)
    MUL             reduce using rule 61 (primitivas -> FALSE .)
    DIV             reduce using rule 61 (primitivas -> FALSE .)
    POT             reduce using rule 61 (primitivas -> FALSE .)
    DEQUALS         reduce using rule 61 (primitivas -> FALSE .)
    DIFF            reduce using rule 61 (primitivas -> FALSE .)
    GREATER         reduce using rule 61 (primitivas -> FALSE .)
    LESSTHAN        reduce using rule 61 (primitivas -> FALSE .)
    GEQ             reduce using rule 61 (primitivas -> FALSE .)
    LEQ             reduce using rule 61 (primitivas -> FALSE .)
    ELSEIF          reduce using rule 61 (primitivas -> FALSE .)
    SEMICOLON       reduce using rule 61 (primitivas -> FALSE .)
    SUFIX           reduce using rule 61 (primitivas -> FALSE .)
    RPAR            reduce using rule 61 (primitivas -> FALSE .)
    COMMA           reduce using rule 61 (primitivas -> FALSE .)
    BRACKETC        reduce using rule 61 (primitivas -> FALSE .)
    ELSE            reduce using rule 61 (primitivas -> FALSE .)


state 29

    (62) primitivas -> TRUE .

    END             reduce using rule 62 (primitivas -> TRUE .)
    AND             reduce using rule 62 (primitivas -> TRUE .)
    OR              reduce using rule 62 (primitivas -> TRUE .)
    SUM             reduce using rule 62 (primitivas -> TRUE .)
    RESTA           reduce using rule 62 (primitivas -> TRUE .)
    MUL             reduce using rule 62 (primitivas -> TRUE .)
    DIV             reduce using rule 62 (primitivas -> TRUE .)
    POT             reduce using rule 62 (primitivas -> TRUE .)
    DEQUALS         reduce using rule 62 (primitivas -> TRUE .)
    DIFF            reduce using rule 62 (primitivas -> TRUE .)
    GREATER         reduce using rule 62 (primitivas -> TRUE .)
    LESSTHAN        reduce using rule 62 (primitivas -> TRUE .)
    GEQ             reduce using rule 62 (primitivas -> TRUE .)
    LEQ             reduce using rule 62 (primitivas -> TRUE .)
    ELSEIF          reduce using rule 62 (primitivas -> TRUE .)
    SEMICOLON       reduce using rule 62 (primitivas -> TRUE .)
    SUFIX           reduce using rule 62 (primitivas -> TRUE .)
    RPAR            reduce using rule 62 (primitivas -> TRUE .)
    COMMA           reduce using rule 62 (primitivas -> TRUE .)
    BRACKETC        reduce using rule 62 (primitivas -> TRUE .)
    ELSE            reduce using rule 62 (primitivas -> TRUE .)


state 30

    (63) primitivas -> STRINGLITERAL .

    END             reduce using rule 63 (primitivas -> STRINGLITERAL .)
    AND             reduce using rule 63 (primitivas -> STRINGLITERAL .)
    OR              reduce using rule 63 (primitivas -> STRINGLITERAL .)
    SUM             reduce using rule 63 (primitivas -> STRINGLITERAL .)
    RESTA           reduce using rule 63 (primitivas -> STRINGLITERAL .)
    MUL             reduce using rule 63 (primitivas -> STRINGLITERAL .)
    DIV             reduce using rule 63 (primitivas -> STRINGLITERAL .)
    POT             reduce using rule 63 (primitivas -> STRINGLITERAL .)
    DEQUALS         reduce using rule 63 (primitivas -> STRINGLITERAL .)
    DIFF            reduce using rule 63 (primitivas -> STRINGLITERAL .)
    GREATER         reduce using rule 63 (primitivas -> STRINGLITERAL .)
    LESSTHAN        reduce using rule 63 (primitivas -> STRINGLITERAL .)
    GEQ             reduce using rule 63 (primitivas -> STRINGLITERAL .)
    LEQ             reduce using rule 63 (primitivas -> STRINGLITERAL .)
    ELSEIF          reduce using rule 63 (primitivas -> STRINGLITERAL .)
    SEMICOLON       reduce using rule 63 (primitivas -> STRINGLITERAL .)
    SUFIX           reduce using rule 63 (primitivas -> STRINGLITERAL .)
    RPAR            reduce using rule 63 (primitivas -> STRINGLITERAL .)
    COMMA           reduce using rule 63 (primitivas -> STRINGLITERAL .)
    BRACKETC        reduce using rule 63 (primitivas -> STRINGLITERAL .)
    ELSE            reduce using rule 63 (primitivas -> STRINGLITERAL .)


state 31

    (64) primitivas -> CHARLITERAL .

    END             reduce using rule 64 (primitivas -> CHARLITERAL .)
    AND             reduce using rule 64 (primitivas -> CHARLITERAL .)
    OR              reduce using rule 64 (primitivas -> CHARLITERAL .)
    SUM             reduce using rule 64 (primitivas -> CHARLITERAL .)
    RESTA           reduce using rule 64 (primitivas -> CHARLITERAL .)
    MUL             reduce using rule 64 (primitivas -> CHARLITERAL .)
    DIV             reduce using rule 64 (primitivas -> CHARLITERAL .)
    POT             reduce using rule 64 (primitivas -> CHARLITERAL .)
    DEQUALS         reduce using rule 64 (primitivas -> CHARLITERAL .)
    DIFF            reduce using rule 64 (primitivas -> CHARLITERAL .)
    GREATER         reduce using rule 64 (primitivas -> CHARLITERAL .)
    LESSTHAN        reduce using rule 64 (primitivas -> CHARLITERAL .)
    GEQ             reduce using rule 64 (primitivas -> CHARLITERAL .)
    LEQ             reduce using rule 64 (primitivas -> CHARLITERAL .)
    ELSEIF          reduce using rule 64 (primitivas -> CHARLITERAL .)
    SEMICOLON       reduce using rule 64 (primitivas -> CHARLITERAL .)
    SUFIX           reduce using rule 64 (primitivas -> CHARLITERAL .)
    RPAR            reduce using rule 64 (primitivas -> CHARLITERAL .)
    COMMA           reduce using rule 64 (primitivas -> CHARLITERAL .)
    BRACKETC        reduce using rule 64 (primitivas -> CHARLITERAL .)
    ELSE            reduce using rule 64 (primitivas -> CHARLITERAL .)


state 32

    (65) primitivas -> NOTHING .

    END             reduce using rule 65 (primitivas -> NOTHING .)
    AND             reduce using rule 65 (primitivas -> NOTHING .)
    OR              reduce using rule 65 (primitivas -> NOTHING .)
    SUM             reduce using rule 65 (primitivas -> NOTHING .)
    RESTA           reduce using rule 65 (primitivas -> NOTHING .)
    MUL             reduce using rule 65 (primitivas -> NOTHING .)
    DIV             reduce using rule 65 (primitivas -> NOTHING .)
    POT             reduce using rule 65 (primitivas -> NOTHING .)
    DEQUALS         reduce using rule 65 (primitivas -> NOTHING .)
    DIFF            reduce using rule 65 (primitivas -> NOTHING .)
    GREATER         reduce using rule 65 (primitivas -> NOTHING .)
    LESSTHAN        reduce using rule 65 (primitivas -> NOTHING .)
    GEQ             reduce using rule 65 (primitivas -> NOTHING .)
    LEQ             reduce using rule 65 (primitivas -> NOTHING .)
    ELSEIF          reduce using rule 65 (primitivas -> NOTHING .)
    SEMICOLON       reduce using rule 65 (primitivas -> NOTHING .)
    SUFIX           reduce using rule 65 (primitivas -> NOTHING .)
    RPAR            reduce using rule 65 (primitivas -> NOTHING .)
    COMMA           reduce using rule 65 (primitivas -> NOTHING .)
    BRACKETC        reduce using rule 65 (primitivas -> NOTHING .)
    ELSE            reduce using rule 65 (primitivas -> NOTHING .)


state 33

    (66) primitivas -> BRACKETA . BRACKETC
    (67) primitivas -> BRACKETA . items BRACKETC
    (68) items -> . items COMMA expresion
    (69) items -> . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    BRACKETC        shift and go to state 61
    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    items                          shift and go to state 62
    expresion                      shift and go to state 63
    primitivas                     shift and go to state 25

state 34

    (37) whileST -> WHILE expresion . END SEMICOLON
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             shift and go to state 64
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    DEQUALS         shift and go to state 52
    DIFF            shift and go to state 53
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57


state 35

    (38) forST -> FOR IDENTIFICADOR . IN expresion END SEMICOLON

    IN              shift and go to state 65


state 36

    (41) struct -> MUTABLE STRUCT . IDENTIFICADOR END SEMICOLON

    IDENTIFICADOR   shift and go to state 66


state 37

    (42) struct -> STRUCT IDENTIFICADOR . END SEMICOLON

    END             shift and go to state 67


state 38

    (21) asignacion -> IDENTIFICADOR EQUALS expresion . SEMICOLON
    (22) asignacion -> IDENTIFICADOR EQUALS expresion . SUFIX tipo_dato SEMICOLON
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    SEMICOLON       shift and go to state 68
    SUFIX           shift and go to state 69
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    DEQUALS         shift and go to state 52
    DIFF            shift and go to state 53
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57


state 39

    (30) callFunction -> IDENTIFICADOR LPAR RPAR . SEMICOLON

    SEMICOLON       shift and go to state 70


state 40

    (31) callFunction -> IDENTIFICADOR LPAR lista_expresion . RPAR SEMICOLON
    (39) lista_expresion -> lista_expresion . COMMA expresion

    RPAR            shift and go to state 71
    COMMA           shift and go to state 72


state 41

    (40) lista_expresion -> expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    RPAR            reduce using rule 40 (lista_expresion -> expresion .)
    COMMA           reduce using rule 40 (lista_expresion -> expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    DEQUALS         shift and go to state 52
    DIFF            shift and go to state 53
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57


state 42

    (11) declareFunction -> FUNCTION IDENTIFICADOR LPAR . lista_parametros RPAR returnValue END SEMICOLON
    (12) declareFunction -> FUNCTION IDENTIFICADOR LPAR . lista_parametros RPAR END SEMICOLON
    (13) declareFunction -> FUNCTION IDENTIFICADOR LPAR . RPAR returnValue END SEMICOLON
    (14) declareFunction -> FUNCTION IDENTIFICADOR LPAR . RPAR END SEMICOLON
    (17) lista_parametros -> . lista_parametros COMMA IDENTIFICADOR
    (18) lista_parametros -> . lista_parametros COMMA IDENTIFICADOR SUFIX tipo_dato
    (19) lista_parametros -> . IDENTIFICADOR SUFIX tipo_dato
    (20) lista_parametros -> . IDENTIFICADOR

    RPAR            shift and go to state 75
    IDENTIFICADOR   shift and go to state 73

    lista_parametros               shift and go to state 74

state 43

    (32) condicional -> IF expresion END . SEMICOLON

    SEMICOLON       shift and go to state 76


state 44

    (33) condicional -> IF expresion elseifList . END SEMICOLON
    (34) condicional -> IF expresion elseifList . ELSE END SEMICOLON
    (35) elseifList -> elseifList . ELSEIF expresion

    END             shift and go to state 77
    ELSE            shift and go to state 78
    ELSEIF          shift and go to state 79


state 45

    (45) expresion -> expresion AND . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 80
    primitivas                     shift and go to state 25

state 46

    (46) expresion -> expresion OR . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 81
    primitivas                     shift and go to state 25

state 47

    (47) expresion -> expresion SUM . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 82
    primitivas                     shift and go to state 25

state 48

    (48) expresion -> expresion RESTA . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 83
    primitivas                     shift and go to state 25

state 49

    (49) expresion -> expresion MUL . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 84
    primitivas                     shift and go to state 25

state 50

    (50) expresion -> expresion DIV . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 85
    primitivas                     shift and go to state 25

state 51

    (51) expresion -> expresion POT . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 86
    primitivas                     shift and go to state 25

state 52

    (52) expresion -> expresion DEQUALS . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 87
    primitivas                     shift and go to state 25

state 53

    (53) expresion -> expresion DIFF . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 88
    primitivas                     shift and go to state 25

state 54

    (54) expresion -> expresion GREATER . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 89
    primitivas                     shift and go to state 25

state 55

    (55) expresion -> expresion LESSTHAN . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 90
    primitivas                     shift and go to state 25

state 56

    (56) expresion -> expresion GEQ . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 91
    primitivas                     shift and go to state 25

state 57

    (57) expresion -> expresion LEQ . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 92
    primitivas                     shift and go to state 25

state 58

    (36) elseifList -> ELSEIF . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 93
    primitivas                     shift and go to state 25

state 59

    (43) expresion -> RESTA expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 43 (expresion -> RESTA expresion .)
    AND             reduce using rule 43 (expresion -> RESTA expresion .)
    OR              reduce using rule 43 (expresion -> RESTA expresion .)
    SUM             reduce using rule 43 (expresion -> RESTA expresion .)
    RESTA           reduce using rule 43 (expresion -> RESTA expresion .)
    MUL             reduce using rule 43 (expresion -> RESTA expresion .)
    DIV             reduce using rule 43 (expresion -> RESTA expresion .)
    POT             reduce using rule 43 (expresion -> RESTA expresion .)
    DEQUALS         reduce using rule 43 (expresion -> RESTA expresion .)
    DIFF            reduce using rule 43 (expresion -> RESTA expresion .)
    GREATER         reduce using rule 43 (expresion -> RESTA expresion .)
    LESSTHAN        reduce using rule 43 (expresion -> RESTA expresion .)
    GEQ             reduce using rule 43 (expresion -> RESTA expresion .)
    LEQ             reduce using rule 43 (expresion -> RESTA expresion .)
    ELSEIF          reduce using rule 43 (expresion -> RESTA expresion .)
    SEMICOLON       reduce using rule 43 (expresion -> RESTA expresion .)
    SUFIX           reduce using rule 43 (expresion -> RESTA expresion .)
    RPAR            reduce using rule 43 (expresion -> RESTA expresion .)
    COMMA           reduce using rule 43 (expresion -> RESTA expresion .)
    BRACKETC        reduce using rule 43 (expresion -> RESTA expresion .)
    ELSE            reduce using rule 43 (expresion -> RESTA expresion .)

  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! SUM             [ shift and go to state 47 ]
  ! RESTA           [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 49 ]
  ! DIV             [ shift and go to state 50 ]
  ! POT             [ shift and go to state 51 ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 60

    (44) expresion -> NOT expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 44 (expresion -> NOT expresion .)
    AND             reduce using rule 44 (expresion -> NOT expresion .)
    OR              reduce using rule 44 (expresion -> NOT expresion .)
    SUM             reduce using rule 44 (expresion -> NOT expresion .)
    RESTA           reduce using rule 44 (expresion -> NOT expresion .)
    MUL             reduce using rule 44 (expresion -> NOT expresion .)
    DIV             reduce using rule 44 (expresion -> NOT expresion .)
    DEQUALS         reduce using rule 44 (expresion -> NOT expresion .)
    DIFF            reduce using rule 44 (expresion -> NOT expresion .)
    GREATER         reduce using rule 44 (expresion -> NOT expresion .)
    LESSTHAN        reduce using rule 44 (expresion -> NOT expresion .)
    GEQ             reduce using rule 44 (expresion -> NOT expresion .)
    LEQ             reduce using rule 44 (expresion -> NOT expresion .)
    ELSEIF          reduce using rule 44 (expresion -> NOT expresion .)
    SEMICOLON       reduce using rule 44 (expresion -> NOT expresion .)
    SUFIX           reduce using rule 44 (expresion -> NOT expresion .)
    RPAR            reduce using rule 44 (expresion -> NOT expresion .)
    COMMA           reduce using rule 44 (expresion -> NOT expresion .)
    BRACKETC        reduce using rule 44 (expresion -> NOT expresion .)
    ELSE            reduce using rule 44 (expresion -> NOT expresion .)
    POT             shift and go to state 51

  ! POT             [ reduce using rule 44 (expresion -> NOT expresion .) ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! SUM             [ shift and go to state 47 ]
  ! RESTA           [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 49 ]
  ! DIV             [ shift and go to state 50 ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 61

    (66) primitivas -> BRACKETA BRACKETC .

    END             reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    AND             reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    OR              reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    SUM             reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    RESTA           reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    MUL             reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    DIV             reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    POT             reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    DEQUALS         reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    DIFF            reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    GREATER         reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    LESSTHAN        reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    GEQ             reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    LEQ             reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    ELSEIF          reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    SEMICOLON       reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    SUFIX           reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    RPAR            reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    COMMA           reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    BRACKETC        reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)
    ELSE            reduce using rule 66 (primitivas -> BRACKETA BRACKETC .)


state 62

    (67) primitivas -> BRACKETA items . BRACKETC
    (68) items -> items . COMMA expresion

    BRACKETC        shift and go to state 94
    COMMA           shift and go to state 95


state 63

    (69) items -> expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    BRACKETC        reduce using rule 69 (items -> expresion .)
    COMMA           reduce using rule 69 (items -> expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    DEQUALS         shift and go to state 52
    DIFF            shift and go to state 53
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57


state 64

    (37) whileST -> WHILE expresion END . SEMICOLON

    SEMICOLON       shift and go to state 96


state 65

    (38) forST -> FOR IDENTIFICADOR IN . expresion END SEMICOLON
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 97
    primitivas                     shift and go to state 25

state 66

    (41) struct -> MUTABLE STRUCT IDENTIFICADOR . END SEMICOLON

    END             shift and go to state 98


state 67

    (42) struct -> STRUCT IDENTIFICADOR END . SEMICOLON

    SEMICOLON       shift and go to state 99


state 68

    (21) asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON .

    IDENTIFICADOR   reduce using rule 21 (asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON .)
    FUNCTION        reduce using rule 21 (asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON .)
    IF              reduce using rule 21 (asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON .)
    WHILE           reduce using rule 21 (asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON .)
    FOR             reduce using rule 21 (asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON .)
    MUTABLE         reduce using rule 21 (asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON .)
    STRUCT          reduce using rule 21 (asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON .)
    $end            reduce using rule 21 (asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON .)


state 69

    (22) asignacion -> IDENTIFICADOR EQUALS expresion SUFIX . tipo_dato SEMICOLON
    (23) tipo_dato -> . INT64
    (24) tipo_dato -> . FLOAT64
    (25) tipo_dato -> . BOOL
    (26) tipo_dato -> . CHAR
    (27) tipo_dato -> . STRING
    (28) tipo_dato -> . ARRAY
    (29) tipo_dato -> . NOTHING

    INT64           shift and go to state 101
    FLOAT64         shift and go to state 102
    BOOL            shift and go to state 103
    CHAR            shift and go to state 104
    STRING          shift and go to state 105
    ARRAY           shift and go to state 106
    NOTHING         shift and go to state 107

    tipo_dato                      shift and go to state 100

state 70

    (30) callFunction -> IDENTIFICADOR LPAR RPAR SEMICOLON .

    IDENTIFICADOR   reduce using rule 30 (callFunction -> IDENTIFICADOR LPAR RPAR SEMICOLON .)
    FUNCTION        reduce using rule 30 (callFunction -> IDENTIFICADOR LPAR RPAR SEMICOLON .)
    IF              reduce using rule 30 (callFunction -> IDENTIFICADOR LPAR RPAR SEMICOLON .)
    WHILE           reduce using rule 30 (callFunction -> IDENTIFICADOR LPAR RPAR SEMICOLON .)
    FOR             reduce using rule 30 (callFunction -> IDENTIFICADOR LPAR RPAR SEMICOLON .)
    MUTABLE         reduce using rule 30 (callFunction -> IDENTIFICADOR LPAR RPAR SEMICOLON .)
    STRUCT          reduce using rule 30 (callFunction -> IDENTIFICADOR LPAR RPAR SEMICOLON .)
    $end            reduce using rule 30 (callFunction -> IDENTIFICADOR LPAR RPAR SEMICOLON .)


state 71

    (31) callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR . SEMICOLON

    SEMICOLON       shift and go to state 108


state 72

    (39) lista_expresion -> lista_expresion COMMA . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 109
    primitivas                     shift and go to state 25

state 73

    (19) lista_parametros -> IDENTIFICADOR . SUFIX tipo_dato
    (20) lista_parametros -> IDENTIFICADOR .

    SUFIX           shift and go to state 110
    RPAR            reduce using rule 20 (lista_parametros -> IDENTIFICADOR .)
    COMMA           reduce using rule 20 (lista_parametros -> IDENTIFICADOR .)


state 74

    (11) declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros . RPAR returnValue END SEMICOLON
    (12) declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros . RPAR END SEMICOLON
    (17) lista_parametros -> lista_parametros . COMMA IDENTIFICADOR
    (18) lista_parametros -> lista_parametros . COMMA IDENTIFICADOR SUFIX tipo_dato

    RPAR            shift and go to state 111
    COMMA           shift and go to state 112


state 75

    (13) declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR . returnValue END SEMICOLON
    (14) declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR . END SEMICOLON
    (15) returnValue -> . RETURN expresion SEMICOLON
    (16) returnValue -> . RETURN SEMICOLON

    END             shift and go to state 114
    RETURN          shift and go to state 115

    returnValue                    shift and go to state 113

state 76

    (32) condicional -> IF expresion END SEMICOLON .

    IDENTIFICADOR   reduce using rule 32 (condicional -> IF expresion END SEMICOLON .)
    FUNCTION        reduce using rule 32 (condicional -> IF expresion END SEMICOLON .)
    IF              reduce using rule 32 (condicional -> IF expresion END SEMICOLON .)
    WHILE           reduce using rule 32 (condicional -> IF expresion END SEMICOLON .)
    FOR             reduce using rule 32 (condicional -> IF expresion END SEMICOLON .)
    MUTABLE         reduce using rule 32 (condicional -> IF expresion END SEMICOLON .)
    STRUCT          reduce using rule 32 (condicional -> IF expresion END SEMICOLON .)
    $end            reduce using rule 32 (condicional -> IF expresion END SEMICOLON .)


state 77

    (33) condicional -> IF expresion elseifList END . SEMICOLON

    SEMICOLON       shift and go to state 116


state 78

    (34) condicional -> IF expresion elseifList ELSE . END SEMICOLON

    END             shift and go to state 117


state 79

    (35) elseifList -> elseifList ELSEIF . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 118
    primitivas                     shift and go to state 25

state 80

    (45) expresion -> expresion AND expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 45 (expresion -> expresion AND expresion .)
    AND             reduce using rule 45 (expresion -> expresion AND expresion .)
    OR              reduce using rule 45 (expresion -> expresion AND expresion .)
    DEQUALS         reduce using rule 45 (expresion -> expresion AND expresion .)
    DIFF            reduce using rule 45 (expresion -> expresion AND expresion .)
    GREATER         reduce using rule 45 (expresion -> expresion AND expresion .)
    LESSTHAN        reduce using rule 45 (expresion -> expresion AND expresion .)
    GEQ             reduce using rule 45 (expresion -> expresion AND expresion .)
    LEQ             reduce using rule 45 (expresion -> expresion AND expresion .)
    ELSEIF          reduce using rule 45 (expresion -> expresion AND expresion .)
    SEMICOLON       reduce using rule 45 (expresion -> expresion AND expresion .)
    SUFIX           reduce using rule 45 (expresion -> expresion AND expresion .)
    RPAR            reduce using rule 45 (expresion -> expresion AND expresion .)
    COMMA           reduce using rule 45 (expresion -> expresion AND expresion .)
    BRACKETC        reduce using rule 45 (expresion -> expresion AND expresion .)
    ELSE            reduce using rule 45 (expresion -> expresion AND expresion .)
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51

  ! SUM             [ reduce using rule 45 (expresion -> expresion AND expresion .) ]
  ! RESTA           [ reduce using rule 45 (expresion -> expresion AND expresion .) ]
  ! MUL             [ reduce using rule 45 (expresion -> expresion AND expresion .) ]
  ! DIV             [ reduce using rule 45 (expresion -> expresion AND expresion .) ]
  ! POT             [ reduce using rule 45 (expresion -> expresion AND expresion .) ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 81

    (46) expresion -> expresion OR expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 46 (expresion -> expresion OR expresion .)
    AND             reduce using rule 46 (expresion -> expresion OR expresion .)
    OR              reduce using rule 46 (expresion -> expresion OR expresion .)
    DEQUALS         reduce using rule 46 (expresion -> expresion OR expresion .)
    DIFF            reduce using rule 46 (expresion -> expresion OR expresion .)
    GREATER         reduce using rule 46 (expresion -> expresion OR expresion .)
    LESSTHAN        reduce using rule 46 (expresion -> expresion OR expresion .)
    GEQ             reduce using rule 46 (expresion -> expresion OR expresion .)
    LEQ             reduce using rule 46 (expresion -> expresion OR expresion .)
    ELSEIF          reduce using rule 46 (expresion -> expresion OR expresion .)
    SEMICOLON       reduce using rule 46 (expresion -> expresion OR expresion .)
    SUFIX           reduce using rule 46 (expresion -> expresion OR expresion .)
    RPAR            reduce using rule 46 (expresion -> expresion OR expresion .)
    COMMA           reduce using rule 46 (expresion -> expresion OR expresion .)
    BRACKETC        reduce using rule 46 (expresion -> expresion OR expresion .)
    ELSE            reduce using rule 46 (expresion -> expresion OR expresion .)
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51

  ! SUM             [ reduce using rule 46 (expresion -> expresion OR expresion .) ]
  ! RESTA           [ reduce using rule 46 (expresion -> expresion OR expresion .) ]
  ! MUL             [ reduce using rule 46 (expresion -> expresion OR expresion .) ]
  ! DIV             [ reduce using rule 46 (expresion -> expresion OR expresion .) ]
  ! POT             [ reduce using rule 46 (expresion -> expresion OR expresion .) ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 82

    (47) expresion -> expresion SUM expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 47 (expresion -> expresion SUM expresion .)
    AND             reduce using rule 47 (expresion -> expresion SUM expresion .)
    OR              reduce using rule 47 (expresion -> expresion SUM expresion .)
    SUM             reduce using rule 47 (expresion -> expresion SUM expresion .)
    RESTA           reduce using rule 47 (expresion -> expresion SUM expresion .)
    DEQUALS         reduce using rule 47 (expresion -> expresion SUM expresion .)
    DIFF            reduce using rule 47 (expresion -> expresion SUM expresion .)
    GREATER         reduce using rule 47 (expresion -> expresion SUM expresion .)
    LESSTHAN        reduce using rule 47 (expresion -> expresion SUM expresion .)
    GEQ             reduce using rule 47 (expresion -> expresion SUM expresion .)
    LEQ             reduce using rule 47 (expresion -> expresion SUM expresion .)
    ELSEIF          reduce using rule 47 (expresion -> expresion SUM expresion .)
    SEMICOLON       reduce using rule 47 (expresion -> expresion SUM expresion .)
    SUFIX           reduce using rule 47 (expresion -> expresion SUM expresion .)
    RPAR            reduce using rule 47 (expresion -> expresion SUM expresion .)
    COMMA           reduce using rule 47 (expresion -> expresion SUM expresion .)
    BRACKETC        reduce using rule 47 (expresion -> expresion SUM expresion .)
    ELSE            reduce using rule 47 (expresion -> expresion SUM expresion .)
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51

  ! MUL             [ reduce using rule 47 (expresion -> expresion SUM expresion .) ]
  ! DIV             [ reduce using rule 47 (expresion -> expresion SUM expresion .) ]
  ! POT             [ reduce using rule 47 (expresion -> expresion SUM expresion .) ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! SUM             [ shift and go to state 47 ]
  ! RESTA           [ shift and go to state 48 ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 83

    (48) expresion -> expresion RESTA expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 48 (expresion -> expresion RESTA expresion .)
    AND             reduce using rule 48 (expresion -> expresion RESTA expresion .)
    OR              reduce using rule 48 (expresion -> expresion RESTA expresion .)
    SUM             reduce using rule 48 (expresion -> expresion RESTA expresion .)
    RESTA           reduce using rule 48 (expresion -> expresion RESTA expresion .)
    DEQUALS         reduce using rule 48 (expresion -> expresion RESTA expresion .)
    DIFF            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    GREATER         reduce using rule 48 (expresion -> expresion RESTA expresion .)
    LESSTHAN        reduce using rule 48 (expresion -> expresion RESTA expresion .)
    GEQ             reduce using rule 48 (expresion -> expresion RESTA expresion .)
    LEQ             reduce using rule 48 (expresion -> expresion RESTA expresion .)
    ELSEIF          reduce using rule 48 (expresion -> expresion RESTA expresion .)
    SEMICOLON       reduce using rule 48 (expresion -> expresion RESTA expresion .)
    SUFIX           reduce using rule 48 (expresion -> expresion RESTA expresion .)
    RPAR            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    COMMA           reduce using rule 48 (expresion -> expresion RESTA expresion .)
    BRACKETC        reduce using rule 48 (expresion -> expresion RESTA expresion .)
    ELSE            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51

  ! MUL             [ reduce using rule 48 (expresion -> expresion RESTA expresion .) ]
  ! DIV             [ reduce using rule 48 (expresion -> expresion RESTA expresion .) ]
  ! POT             [ reduce using rule 48 (expresion -> expresion RESTA expresion .) ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! SUM             [ shift and go to state 47 ]
  ! RESTA           [ shift and go to state 48 ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 84

    (49) expresion -> expresion MUL expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 49 (expresion -> expresion MUL expresion .)
    AND             reduce using rule 49 (expresion -> expresion MUL expresion .)
    OR              reduce using rule 49 (expresion -> expresion MUL expresion .)
    SUM             reduce using rule 49 (expresion -> expresion MUL expresion .)
    RESTA           reduce using rule 49 (expresion -> expresion MUL expresion .)
    MUL             reduce using rule 49 (expresion -> expresion MUL expresion .)
    DIV             reduce using rule 49 (expresion -> expresion MUL expresion .)
    DEQUALS         reduce using rule 49 (expresion -> expresion MUL expresion .)
    DIFF            reduce using rule 49 (expresion -> expresion MUL expresion .)
    GREATER         reduce using rule 49 (expresion -> expresion MUL expresion .)
    LESSTHAN        reduce using rule 49 (expresion -> expresion MUL expresion .)
    GEQ             reduce using rule 49 (expresion -> expresion MUL expresion .)
    LEQ             reduce using rule 49 (expresion -> expresion MUL expresion .)
    ELSEIF          reduce using rule 49 (expresion -> expresion MUL expresion .)
    SEMICOLON       reduce using rule 49 (expresion -> expresion MUL expresion .)
    SUFIX           reduce using rule 49 (expresion -> expresion MUL expresion .)
    RPAR            reduce using rule 49 (expresion -> expresion MUL expresion .)
    COMMA           reduce using rule 49 (expresion -> expresion MUL expresion .)
    BRACKETC        reduce using rule 49 (expresion -> expresion MUL expresion .)
    ELSE            reduce using rule 49 (expresion -> expresion MUL expresion .)
    POT             shift and go to state 51

  ! POT             [ reduce using rule 49 (expresion -> expresion MUL expresion .) ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! SUM             [ shift and go to state 47 ]
  ! RESTA           [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 49 ]
  ! DIV             [ shift and go to state 50 ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 85

    (50) expresion -> expresion DIV expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 50 (expresion -> expresion DIV expresion .)
    AND             reduce using rule 50 (expresion -> expresion DIV expresion .)
    OR              reduce using rule 50 (expresion -> expresion DIV expresion .)
    SUM             reduce using rule 50 (expresion -> expresion DIV expresion .)
    RESTA           reduce using rule 50 (expresion -> expresion DIV expresion .)
    MUL             reduce using rule 50 (expresion -> expresion DIV expresion .)
    DIV             reduce using rule 50 (expresion -> expresion DIV expresion .)
    DEQUALS         reduce using rule 50 (expresion -> expresion DIV expresion .)
    DIFF            reduce using rule 50 (expresion -> expresion DIV expresion .)
    GREATER         reduce using rule 50 (expresion -> expresion DIV expresion .)
    LESSTHAN        reduce using rule 50 (expresion -> expresion DIV expresion .)
    GEQ             reduce using rule 50 (expresion -> expresion DIV expresion .)
    LEQ             reduce using rule 50 (expresion -> expresion DIV expresion .)
    ELSEIF          reduce using rule 50 (expresion -> expresion DIV expresion .)
    SEMICOLON       reduce using rule 50 (expresion -> expresion DIV expresion .)
    SUFIX           reduce using rule 50 (expresion -> expresion DIV expresion .)
    RPAR            reduce using rule 50 (expresion -> expresion DIV expresion .)
    COMMA           reduce using rule 50 (expresion -> expresion DIV expresion .)
    BRACKETC        reduce using rule 50 (expresion -> expresion DIV expresion .)
    ELSE            reduce using rule 50 (expresion -> expresion DIV expresion .)
    POT             shift and go to state 51

  ! POT             [ reduce using rule 50 (expresion -> expresion DIV expresion .) ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! SUM             [ shift and go to state 47 ]
  ! RESTA           [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 49 ]
  ! DIV             [ shift and go to state 50 ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 86

    (51) expresion -> expresion POT expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 51 (expresion -> expresion POT expresion .)
    AND             reduce using rule 51 (expresion -> expresion POT expresion .)
    OR              reduce using rule 51 (expresion -> expresion POT expresion .)
    SUM             reduce using rule 51 (expresion -> expresion POT expresion .)
    RESTA           reduce using rule 51 (expresion -> expresion POT expresion .)
    MUL             reduce using rule 51 (expresion -> expresion POT expresion .)
    DIV             reduce using rule 51 (expresion -> expresion POT expresion .)
    DEQUALS         reduce using rule 51 (expresion -> expresion POT expresion .)
    DIFF            reduce using rule 51 (expresion -> expresion POT expresion .)
    GREATER         reduce using rule 51 (expresion -> expresion POT expresion .)
    LESSTHAN        reduce using rule 51 (expresion -> expresion POT expresion .)
    GEQ             reduce using rule 51 (expresion -> expresion POT expresion .)
    LEQ             reduce using rule 51 (expresion -> expresion POT expresion .)
    ELSEIF          reduce using rule 51 (expresion -> expresion POT expresion .)
    SEMICOLON       reduce using rule 51 (expresion -> expresion POT expresion .)
    SUFIX           reduce using rule 51 (expresion -> expresion POT expresion .)
    RPAR            reduce using rule 51 (expresion -> expresion POT expresion .)
    COMMA           reduce using rule 51 (expresion -> expresion POT expresion .)
    BRACKETC        reduce using rule 51 (expresion -> expresion POT expresion .)
    ELSE            reduce using rule 51 (expresion -> expresion POT expresion .)
    POT             shift and go to state 51

  ! POT             [ reduce using rule 51 (expresion -> expresion POT expresion .) ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! SUM             [ shift and go to state 47 ]
  ! RESTA           [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 49 ]
  ! DIV             [ shift and go to state 50 ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 87

    (52) expresion -> expresion DEQUALS expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 52 (expresion -> expresion DEQUALS expresion .)
    DEQUALS         reduce using rule 52 (expresion -> expresion DEQUALS expresion .)
    DIFF            reduce using rule 52 (expresion -> expresion DEQUALS expresion .)
    ELSEIF          reduce using rule 52 (expresion -> expresion DEQUALS expresion .)
    SEMICOLON       reduce using rule 52 (expresion -> expresion DEQUALS expresion .)
    SUFIX           reduce using rule 52 (expresion -> expresion DEQUALS expresion .)
    RPAR            reduce using rule 52 (expresion -> expresion DEQUALS expresion .)
    COMMA           reduce using rule 52 (expresion -> expresion DEQUALS expresion .)
    BRACKETC        reduce using rule 52 (expresion -> expresion DEQUALS expresion .)
    ELSE            reduce using rule 52 (expresion -> expresion DEQUALS expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57

  ! AND             [ reduce using rule 52 (expresion -> expresion DEQUALS expresion .) ]
  ! OR              [ reduce using rule 52 (expresion -> expresion DEQUALS expresion .) ]
  ! SUM             [ reduce using rule 52 (expresion -> expresion DEQUALS expresion .) ]
  ! RESTA           [ reduce using rule 52 (expresion -> expresion DEQUALS expresion .) ]
  ! MUL             [ reduce using rule 52 (expresion -> expresion DEQUALS expresion .) ]
  ! DIV             [ reduce using rule 52 (expresion -> expresion DEQUALS expresion .) ]
  ! POT             [ reduce using rule 52 (expresion -> expresion DEQUALS expresion .) ]
  ! GREATER         [ reduce using rule 52 (expresion -> expresion DEQUALS expresion .) ]
  ! LESSTHAN        [ reduce using rule 52 (expresion -> expresion DEQUALS expresion .) ]
  ! GEQ             [ reduce using rule 52 (expresion -> expresion DEQUALS expresion .) ]
  ! LEQ             [ reduce using rule 52 (expresion -> expresion DEQUALS expresion .) ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]


state 88

    (53) expresion -> expresion DIFF expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 53 (expresion -> expresion DIFF expresion .)
    DEQUALS         reduce using rule 53 (expresion -> expresion DIFF expresion .)
    DIFF            reduce using rule 53 (expresion -> expresion DIFF expresion .)
    ELSEIF          reduce using rule 53 (expresion -> expresion DIFF expresion .)
    SEMICOLON       reduce using rule 53 (expresion -> expresion DIFF expresion .)
    SUFIX           reduce using rule 53 (expresion -> expresion DIFF expresion .)
    RPAR            reduce using rule 53 (expresion -> expresion DIFF expresion .)
    COMMA           reduce using rule 53 (expresion -> expresion DIFF expresion .)
    BRACKETC        reduce using rule 53 (expresion -> expresion DIFF expresion .)
    ELSE            reduce using rule 53 (expresion -> expresion DIFF expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57

  ! AND             [ reduce using rule 53 (expresion -> expresion DIFF expresion .) ]
  ! OR              [ reduce using rule 53 (expresion -> expresion DIFF expresion .) ]
  ! SUM             [ reduce using rule 53 (expresion -> expresion DIFF expresion .) ]
  ! RESTA           [ reduce using rule 53 (expresion -> expresion DIFF expresion .) ]
  ! MUL             [ reduce using rule 53 (expresion -> expresion DIFF expresion .) ]
  ! DIV             [ reduce using rule 53 (expresion -> expresion DIFF expresion .) ]
  ! POT             [ reduce using rule 53 (expresion -> expresion DIFF expresion .) ]
  ! GREATER         [ reduce using rule 53 (expresion -> expresion DIFF expresion .) ]
  ! LESSTHAN        [ reduce using rule 53 (expresion -> expresion DIFF expresion .) ]
  ! GEQ             [ reduce using rule 53 (expresion -> expresion DIFF expresion .) ]
  ! LEQ             [ reduce using rule 53 (expresion -> expresion DIFF expresion .) ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]


state 89

    (54) expresion -> expresion GREATER expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 54 (expresion -> expresion GREATER expresion .)
    DEQUALS         reduce using rule 54 (expresion -> expresion GREATER expresion .)
    DIFF            reduce using rule 54 (expresion -> expresion GREATER expresion .)
    GREATER         reduce using rule 54 (expresion -> expresion GREATER expresion .)
    LESSTHAN        reduce using rule 54 (expresion -> expresion GREATER expresion .)
    GEQ             reduce using rule 54 (expresion -> expresion GREATER expresion .)
    LEQ             reduce using rule 54 (expresion -> expresion GREATER expresion .)
    ELSEIF          reduce using rule 54 (expresion -> expresion GREATER expresion .)
    SEMICOLON       reduce using rule 54 (expresion -> expresion GREATER expresion .)
    SUFIX           reduce using rule 54 (expresion -> expresion GREATER expresion .)
    RPAR            reduce using rule 54 (expresion -> expresion GREATER expresion .)
    COMMA           reduce using rule 54 (expresion -> expresion GREATER expresion .)
    BRACKETC        reduce using rule 54 (expresion -> expresion GREATER expresion .)
    ELSE            reduce using rule 54 (expresion -> expresion GREATER expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51

  ! AND             [ reduce using rule 54 (expresion -> expresion GREATER expresion .) ]
  ! OR              [ reduce using rule 54 (expresion -> expresion GREATER expresion .) ]
  ! SUM             [ reduce using rule 54 (expresion -> expresion GREATER expresion .) ]
  ! RESTA           [ reduce using rule 54 (expresion -> expresion GREATER expresion .) ]
  ! MUL             [ reduce using rule 54 (expresion -> expresion GREATER expresion .) ]
  ! DIV             [ reduce using rule 54 (expresion -> expresion GREATER expresion .) ]
  ! POT             [ reduce using rule 54 (expresion -> expresion GREATER expresion .) ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 90

    (55) expresion -> expresion LESSTHAN expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    DEQUALS         reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    DIFF            reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    GREATER         reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    LESSTHAN        reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    GEQ             reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    LEQ             reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    ELSEIF          reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    SEMICOLON       reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    SUFIX           reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    RPAR            reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    COMMA           reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    BRACKETC        reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    ELSE            reduce using rule 55 (expresion -> expresion LESSTHAN expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51

  ! AND             [ reduce using rule 55 (expresion -> expresion LESSTHAN expresion .) ]
  ! OR              [ reduce using rule 55 (expresion -> expresion LESSTHAN expresion .) ]
  ! SUM             [ reduce using rule 55 (expresion -> expresion LESSTHAN expresion .) ]
  ! RESTA           [ reduce using rule 55 (expresion -> expresion LESSTHAN expresion .) ]
  ! MUL             [ reduce using rule 55 (expresion -> expresion LESSTHAN expresion .) ]
  ! DIV             [ reduce using rule 55 (expresion -> expresion LESSTHAN expresion .) ]
  ! POT             [ reduce using rule 55 (expresion -> expresion LESSTHAN expresion .) ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 91

    (56) expresion -> expresion GEQ expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 56 (expresion -> expresion GEQ expresion .)
    DEQUALS         reduce using rule 56 (expresion -> expresion GEQ expresion .)
    DIFF            reduce using rule 56 (expresion -> expresion GEQ expresion .)
    GREATER         reduce using rule 56 (expresion -> expresion GEQ expresion .)
    LESSTHAN        reduce using rule 56 (expresion -> expresion GEQ expresion .)
    GEQ             reduce using rule 56 (expresion -> expresion GEQ expresion .)
    LEQ             reduce using rule 56 (expresion -> expresion GEQ expresion .)
    ELSEIF          reduce using rule 56 (expresion -> expresion GEQ expresion .)
    SEMICOLON       reduce using rule 56 (expresion -> expresion GEQ expresion .)
    SUFIX           reduce using rule 56 (expresion -> expresion GEQ expresion .)
    RPAR            reduce using rule 56 (expresion -> expresion GEQ expresion .)
    COMMA           reduce using rule 56 (expresion -> expresion GEQ expresion .)
    BRACKETC        reduce using rule 56 (expresion -> expresion GEQ expresion .)
    ELSE            reduce using rule 56 (expresion -> expresion GEQ expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51

  ! AND             [ reduce using rule 56 (expresion -> expresion GEQ expresion .) ]
  ! OR              [ reduce using rule 56 (expresion -> expresion GEQ expresion .) ]
  ! SUM             [ reduce using rule 56 (expresion -> expresion GEQ expresion .) ]
  ! RESTA           [ reduce using rule 56 (expresion -> expresion GEQ expresion .) ]
  ! MUL             [ reduce using rule 56 (expresion -> expresion GEQ expresion .) ]
  ! DIV             [ reduce using rule 56 (expresion -> expresion GEQ expresion .) ]
  ! POT             [ reduce using rule 56 (expresion -> expresion GEQ expresion .) ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 92

    (57) expresion -> expresion LEQ expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 57 (expresion -> expresion LEQ expresion .)
    DEQUALS         reduce using rule 57 (expresion -> expresion LEQ expresion .)
    DIFF            reduce using rule 57 (expresion -> expresion LEQ expresion .)
    GREATER         reduce using rule 57 (expresion -> expresion LEQ expresion .)
    LESSTHAN        reduce using rule 57 (expresion -> expresion LEQ expresion .)
    GEQ             reduce using rule 57 (expresion -> expresion LEQ expresion .)
    LEQ             reduce using rule 57 (expresion -> expresion LEQ expresion .)
    ELSEIF          reduce using rule 57 (expresion -> expresion LEQ expresion .)
    SEMICOLON       reduce using rule 57 (expresion -> expresion LEQ expresion .)
    SUFIX           reduce using rule 57 (expresion -> expresion LEQ expresion .)
    RPAR            reduce using rule 57 (expresion -> expresion LEQ expresion .)
    COMMA           reduce using rule 57 (expresion -> expresion LEQ expresion .)
    BRACKETC        reduce using rule 57 (expresion -> expresion LEQ expresion .)
    ELSE            reduce using rule 57 (expresion -> expresion LEQ expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51

  ! AND             [ reduce using rule 57 (expresion -> expresion LEQ expresion .) ]
  ! OR              [ reduce using rule 57 (expresion -> expresion LEQ expresion .) ]
  ! SUM             [ reduce using rule 57 (expresion -> expresion LEQ expresion .) ]
  ! RESTA           [ reduce using rule 57 (expresion -> expresion LEQ expresion .) ]
  ! MUL             [ reduce using rule 57 (expresion -> expresion LEQ expresion .) ]
  ! DIV             [ reduce using rule 57 (expresion -> expresion LEQ expresion .) ]
  ! POT             [ reduce using rule 57 (expresion -> expresion LEQ expresion .) ]
  ! DEQUALS         [ shift and go to state 52 ]
  ! DIFF            [ shift and go to state 53 ]
  ! GREATER         [ shift and go to state 54 ]
  ! LESSTHAN        [ shift and go to state 55 ]
  ! GEQ             [ shift and go to state 56 ]
  ! LEQ             [ shift and go to state 57 ]


state 93

    (36) elseifList -> ELSEIF expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 36 (elseifList -> ELSEIF expresion .)
    ELSE            reduce using rule 36 (elseifList -> ELSEIF expresion .)
    ELSEIF          reduce using rule 36 (elseifList -> ELSEIF expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    DEQUALS         shift and go to state 52
    DIFF            shift and go to state 53
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57


state 94

    (67) primitivas -> BRACKETA items BRACKETC .

    END             reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    AND             reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    OR              reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    SUM             reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    RESTA           reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    MUL             reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    DIV             reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    POT             reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    DEQUALS         reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    DIFF            reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    GREATER         reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    LESSTHAN        reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    GEQ             reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    LEQ             reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    ELSEIF          reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    SEMICOLON       reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    SUFIX           reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    RPAR            reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    COMMA           reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    BRACKETC        reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)
    ELSE            reduce using rule 67 (primitivas -> BRACKETA items BRACKETC .)


state 95

    (68) items -> items COMMA . expresion
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 119
    primitivas                     shift and go to state 25

state 96

    (37) whileST -> WHILE expresion END SEMICOLON .

    IDENTIFICADOR   reduce using rule 37 (whileST -> WHILE expresion END SEMICOLON .)
    FUNCTION        reduce using rule 37 (whileST -> WHILE expresion END SEMICOLON .)
    IF              reduce using rule 37 (whileST -> WHILE expresion END SEMICOLON .)
    WHILE           reduce using rule 37 (whileST -> WHILE expresion END SEMICOLON .)
    FOR             reduce using rule 37 (whileST -> WHILE expresion END SEMICOLON .)
    MUTABLE         reduce using rule 37 (whileST -> WHILE expresion END SEMICOLON .)
    STRUCT          reduce using rule 37 (whileST -> WHILE expresion END SEMICOLON .)
    $end            reduce using rule 37 (whileST -> WHILE expresion END SEMICOLON .)


state 97

    (38) forST -> FOR IDENTIFICADOR IN expresion . END SEMICOLON
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             shift and go to state 120
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    DEQUALS         shift and go to state 52
    DIFF            shift and go to state 53
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57


state 98

    (41) struct -> MUTABLE STRUCT IDENTIFICADOR END . SEMICOLON

    SEMICOLON       shift and go to state 121


state 99

    (42) struct -> STRUCT IDENTIFICADOR END SEMICOLON .

    IDENTIFICADOR   reduce using rule 42 (struct -> STRUCT IDENTIFICADOR END SEMICOLON .)
    FUNCTION        reduce using rule 42 (struct -> STRUCT IDENTIFICADOR END SEMICOLON .)
    IF              reduce using rule 42 (struct -> STRUCT IDENTIFICADOR END SEMICOLON .)
    WHILE           reduce using rule 42 (struct -> STRUCT IDENTIFICADOR END SEMICOLON .)
    FOR             reduce using rule 42 (struct -> STRUCT IDENTIFICADOR END SEMICOLON .)
    MUTABLE         reduce using rule 42 (struct -> STRUCT IDENTIFICADOR END SEMICOLON .)
    STRUCT          reduce using rule 42 (struct -> STRUCT IDENTIFICADOR END SEMICOLON .)
    $end            reduce using rule 42 (struct -> STRUCT IDENTIFICADOR END SEMICOLON .)


state 100

    (22) asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato . SEMICOLON

    SEMICOLON       shift and go to state 122


state 101

    (23) tipo_dato -> INT64 .

    SEMICOLON       reduce using rule 23 (tipo_dato -> INT64 .)
    RPAR            reduce using rule 23 (tipo_dato -> INT64 .)
    COMMA           reduce using rule 23 (tipo_dato -> INT64 .)


state 102

    (24) tipo_dato -> FLOAT64 .

    SEMICOLON       reduce using rule 24 (tipo_dato -> FLOAT64 .)
    RPAR            reduce using rule 24 (tipo_dato -> FLOAT64 .)
    COMMA           reduce using rule 24 (tipo_dato -> FLOAT64 .)


state 103

    (25) tipo_dato -> BOOL .

    SEMICOLON       reduce using rule 25 (tipo_dato -> BOOL .)
    RPAR            reduce using rule 25 (tipo_dato -> BOOL .)
    COMMA           reduce using rule 25 (tipo_dato -> BOOL .)


state 104

    (26) tipo_dato -> CHAR .

    SEMICOLON       reduce using rule 26 (tipo_dato -> CHAR .)
    RPAR            reduce using rule 26 (tipo_dato -> CHAR .)
    COMMA           reduce using rule 26 (tipo_dato -> CHAR .)


state 105

    (27) tipo_dato -> STRING .

    SEMICOLON       reduce using rule 27 (tipo_dato -> STRING .)
    RPAR            reduce using rule 27 (tipo_dato -> STRING .)
    COMMA           reduce using rule 27 (tipo_dato -> STRING .)


state 106

    (28) tipo_dato -> ARRAY .

    SEMICOLON       reduce using rule 28 (tipo_dato -> ARRAY .)
    RPAR            reduce using rule 28 (tipo_dato -> ARRAY .)
    COMMA           reduce using rule 28 (tipo_dato -> ARRAY .)


state 107

    (29) tipo_dato -> NOTHING .

    SEMICOLON       reduce using rule 29 (tipo_dato -> NOTHING .)
    RPAR            reduce using rule 29 (tipo_dato -> NOTHING .)
    COMMA           reduce using rule 29 (tipo_dato -> NOTHING .)


state 108

    (31) callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON .

    IDENTIFICADOR   reduce using rule 31 (callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON .)
    FUNCTION        reduce using rule 31 (callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON .)
    IF              reduce using rule 31 (callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON .)
    WHILE           reduce using rule 31 (callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON .)
    FOR             reduce using rule 31 (callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON .)
    MUTABLE         reduce using rule 31 (callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON .)
    STRUCT          reduce using rule 31 (callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON .)
    $end            reduce using rule 31 (callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON .)


state 109

    (39) lista_expresion -> lista_expresion COMMA expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    RPAR            reduce using rule 39 (lista_expresion -> lista_expresion COMMA expresion .)
    COMMA           reduce using rule 39 (lista_expresion -> lista_expresion COMMA expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    DEQUALS         shift and go to state 52
    DIFF            shift and go to state 53
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57


state 110

    (19) lista_parametros -> IDENTIFICADOR SUFIX . tipo_dato
    (23) tipo_dato -> . INT64
    (24) tipo_dato -> . FLOAT64
    (25) tipo_dato -> . BOOL
    (26) tipo_dato -> . CHAR
    (27) tipo_dato -> . STRING
    (28) tipo_dato -> . ARRAY
    (29) tipo_dato -> . NOTHING

    INT64           shift and go to state 101
    FLOAT64         shift and go to state 102
    BOOL            shift and go to state 103
    CHAR            shift and go to state 104
    STRING          shift and go to state 105
    ARRAY           shift and go to state 106
    NOTHING         shift and go to state 107

    tipo_dato                      shift and go to state 123

state 111

    (11) declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR . returnValue END SEMICOLON
    (12) declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR . END SEMICOLON
    (15) returnValue -> . RETURN expresion SEMICOLON
    (16) returnValue -> . RETURN SEMICOLON

    END             shift and go to state 125
    RETURN          shift and go to state 115

    returnValue                    shift and go to state 124

state 112

    (17) lista_parametros -> lista_parametros COMMA . IDENTIFICADOR
    (18) lista_parametros -> lista_parametros COMMA . IDENTIFICADOR SUFIX tipo_dato

    IDENTIFICADOR   shift and go to state 126


state 113

    (13) declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue . END SEMICOLON

    END             shift and go to state 127


state 114

    (14) declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END . SEMICOLON

    SEMICOLON       shift and go to state 128


state 115

    (15) returnValue -> RETURN . expresion SEMICOLON
    (16) returnValue -> RETURN . SEMICOLON
    (43) expresion -> . RESTA expresion
    (44) expresion -> . NOT expresion
    (45) expresion -> . expresion AND expresion
    (46) expresion -> . expresion OR expresion
    (47) expresion -> . expresion SUM expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MUL expresion
    (50) expresion -> . expresion DIV expresion
    (51) expresion -> . expresion POT expresion
    (52) expresion -> . expresion DEQUALS expresion
    (53) expresion -> . expresion DIFF expresion
    (54) expresion -> . expresion GREATER expresion
    (55) expresion -> . expresion LESSTHAN expresion
    (56) expresion -> . expresion GEQ expresion
    (57) expresion -> . expresion LEQ expresion
    (58) expresion -> . primitivas
    (59) primitivas -> . ENTERO
    (60) primitivas -> . DECIMAL
    (61) primitivas -> . FALSE
    (62) primitivas -> . TRUE
    (63) primitivas -> . STRINGLITERAL
    (64) primitivas -> . CHARLITERAL
    (65) primitivas -> . NOTHING
    (66) primitivas -> . BRACKETA BRACKETC
    (67) primitivas -> . BRACKETA items BRACKETC

    SEMICOLON       shift and go to state 130
    RESTA           shift and go to state 23
    NOT             shift and go to state 24
    ENTERO          shift and go to state 26
    DECIMAL         shift and go to state 27
    FALSE           shift and go to state 28
    TRUE            shift and go to state 29
    STRINGLITERAL   shift and go to state 30
    CHARLITERAL     shift and go to state 31
    NOTHING         shift and go to state 32
    BRACKETA        shift and go to state 33

    expresion                      shift and go to state 129
    primitivas                     shift and go to state 25

state 116

    (33) condicional -> IF expresion elseifList END SEMICOLON .

    IDENTIFICADOR   reduce using rule 33 (condicional -> IF expresion elseifList END SEMICOLON .)
    FUNCTION        reduce using rule 33 (condicional -> IF expresion elseifList END SEMICOLON .)
    IF              reduce using rule 33 (condicional -> IF expresion elseifList END SEMICOLON .)
    WHILE           reduce using rule 33 (condicional -> IF expresion elseifList END SEMICOLON .)
    FOR             reduce using rule 33 (condicional -> IF expresion elseifList END SEMICOLON .)
    MUTABLE         reduce using rule 33 (condicional -> IF expresion elseifList END SEMICOLON .)
    STRUCT          reduce using rule 33 (condicional -> IF expresion elseifList END SEMICOLON .)
    $end            reduce using rule 33 (condicional -> IF expresion elseifList END SEMICOLON .)


state 117

    (34) condicional -> IF expresion elseifList ELSE END . SEMICOLON

    SEMICOLON       shift and go to state 131


state 118

    (35) elseifList -> elseifList ELSEIF expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    END             reduce using rule 35 (elseifList -> elseifList ELSEIF expresion .)
    ELSE            reduce using rule 35 (elseifList -> elseifList ELSEIF expresion .)
    ELSEIF          reduce using rule 35 (elseifList -> elseifList ELSEIF expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    DEQUALS         shift and go to state 52
    DIFF            shift and go to state 53
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57


state 119

    (68) items -> items COMMA expresion .
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    BRACKETC        reduce using rule 68 (items -> items COMMA expresion .)
    COMMA           reduce using rule 68 (items -> items COMMA expresion .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    DEQUALS         shift and go to state 52
    DIFF            shift and go to state 53
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57


state 120

    (38) forST -> FOR IDENTIFICADOR IN expresion END . SEMICOLON

    SEMICOLON       shift and go to state 132


state 121

    (41) struct -> MUTABLE STRUCT IDENTIFICADOR END SEMICOLON .

    IDENTIFICADOR   reduce using rule 41 (struct -> MUTABLE STRUCT IDENTIFICADOR END SEMICOLON .)
    FUNCTION        reduce using rule 41 (struct -> MUTABLE STRUCT IDENTIFICADOR END SEMICOLON .)
    IF              reduce using rule 41 (struct -> MUTABLE STRUCT IDENTIFICADOR END SEMICOLON .)
    WHILE           reduce using rule 41 (struct -> MUTABLE STRUCT IDENTIFICADOR END SEMICOLON .)
    FOR             reduce using rule 41 (struct -> MUTABLE STRUCT IDENTIFICADOR END SEMICOLON .)
    MUTABLE         reduce using rule 41 (struct -> MUTABLE STRUCT IDENTIFICADOR END SEMICOLON .)
    STRUCT          reduce using rule 41 (struct -> MUTABLE STRUCT IDENTIFICADOR END SEMICOLON .)
    $end            reduce using rule 41 (struct -> MUTABLE STRUCT IDENTIFICADOR END SEMICOLON .)


state 122

    (22) asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON .

    IDENTIFICADOR   reduce using rule 22 (asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON .)
    FUNCTION        reduce using rule 22 (asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON .)
    IF              reduce using rule 22 (asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON .)
    WHILE           reduce using rule 22 (asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON .)
    FOR             reduce using rule 22 (asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON .)
    MUTABLE         reduce using rule 22 (asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON .)
    STRUCT          reduce using rule 22 (asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON .)
    $end            reduce using rule 22 (asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON .)


state 123

    (19) lista_parametros -> IDENTIFICADOR SUFIX tipo_dato .

    RPAR            reduce using rule 19 (lista_parametros -> IDENTIFICADOR SUFIX tipo_dato .)
    COMMA           reduce using rule 19 (lista_parametros -> IDENTIFICADOR SUFIX tipo_dato .)


state 124

    (11) declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue . END SEMICOLON

    END             shift and go to state 133


state 125

    (12) declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END . SEMICOLON

    SEMICOLON       shift and go to state 134


state 126

    (17) lista_parametros -> lista_parametros COMMA IDENTIFICADOR .
    (18) lista_parametros -> lista_parametros COMMA IDENTIFICADOR . SUFIX tipo_dato

    RPAR            reduce using rule 17 (lista_parametros -> lista_parametros COMMA IDENTIFICADOR .)
    COMMA           reduce using rule 17 (lista_parametros -> lista_parametros COMMA IDENTIFICADOR .)
    SUFIX           shift and go to state 135


state 127

    (13) declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END . SEMICOLON

    SEMICOLON       shift and go to state 136


state 128

    (14) declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON .

    IDENTIFICADOR   reduce using rule 14 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON .)
    FUNCTION        reduce using rule 14 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON .)
    IF              reduce using rule 14 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON .)
    WHILE           reduce using rule 14 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON .)
    FOR             reduce using rule 14 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON .)
    MUTABLE         reduce using rule 14 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON .)
    STRUCT          reduce using rule 14 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON .)
    $end            reduce using rule 14 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON .)


state 129

    (15) returnValue -> RETURN expresion . SEMICOLON
    (45) expresion -> expresion . AND expresion
    (46) expresion -> expresion . OR expresion
    (47) expresion -> expresion . SUM expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MUL expresion
    (50) expresion -> expresion . DIV expresion
    (51) expresion -> expresion . POT expresion
    (52) expresion -> expresion . DEQUALS expresion
    (53) expresion -> expresion . DIFF expresion
    (54) expresion -> expresion . GREATER expresion
    (55) expresion -> expresion . LESSTHAN expresion
    (56) expresion -> expresion . GEQ expresion
    (57) expresion -> expresion . LEQ expresion

    SEMICOLON       shift and go to state 137
    AND             shift and go to state 45
    OR              shift and go to state 46
    SUM             shift and go to state 47
    RESTA           shift and go to state 48
    MUL             shift and go to state 49
    DIV             shift and go to state 50
    POT             shift and go to state 51
    DEQUALS         shift and go to state 52
    DIFF            shift and go to state 53
    GREATER         shift and go to state 54
    LESSTHAN        shift and go to state 55
    GEQ             shift and go to state 56
    LEQ             shift and go to state 57


state 130

    (16) returnValue -> RETURN SEMICOLON .

    END             reduce using rule 16 (returnValue -> RETURN SEMICOLON .)


state 131

    (34) condicional -> IF expresion elseifList ELSE END SEMICOLON .

    IDENTIFICADOR   reduce using rule 34 (condicional -> IF expresion elseifList ELSE END SEMICOLON .)
    FUNCTION        reduce using rule 34 (condicional -> IF expresion elseifList ELSE END SEMICOLON .)
    IF              reduce using rule 34 (condicional -> IF expresion elseifList ELSE END SEMICOLON .)
    WHILE           reduce using rule 34 (condicional -> IF expresion elseifList ELSE END SEMICOLON .)
    FOR             reduce using rule 34 (condicional -> IF expresion elseifList ELSE END SEMICOLON .)
    MUTABLE         reduce using rule 34 (condicional -> IF expresion elseifList ELSE END SEMICOLON .)
    STRUCT          reduce using rule 34 (condicional -> IF expresion elseifList ELSE END SEMICOLON .)
    $end            reduce using rule 34 (condicional -> IF expresion elseifList ELSE END SEMICOLON .)


state 132

    (38) forST -> FOR IDENTIFICADOR IN expresion END SEMICOLON .

    IDENTIFICADOR   reduce using rule 38 (forST -> FOR IDENTIFICADOR IN expresion END SEMICOLON .)
    FUNCTION        reduce using rule 38 (forST -> FOR IDENTIFICADOR IN expresion END SEMICOLON .)
    IF              reduce using rule 38 (forST -> FOR IDENTIFICADOR IN expresion END SEMICOLON .)
    WHILE           reduce using rule 38 (forST -> FOR IDENTIFICADOR IN expresion END SEMICOLON .)
    FOR             reduce using rule 38 (forST -> FOR IDENTIFICADOR IN expresion END SEMICOLON .)
    MUTABLE         reduce using rule 38 (forST -> FOR IDENTIFICADOR IN expresion END SEMICOLON .)
    STRUCT          reduce using rule 38 (forST -> FOR IDENTIFICADOR IN expresion END SEMICOLON .)
    $end            reduce using rule 38 (forST -> FOR IDENTIFICADOR IN expresion END SEMICOLON .)


state 133

    (11) declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END . SEMICOLON

    SEMICOLON       shift and go to state 138


state 134

    (12) declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON .

    IDENTIFICADOR   reduce using rule 12 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON .)
    FUNCTION        reduce using rule 12 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON .)
    IF              reduce using rule 12 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON .)
    WHILE           reduce using rule 12 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON .)
    FOR             reduce using rule 12 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON .)
    MUTABLE         reduce using rule 12 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON .)
    STRUCT          reduce using rule 12 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON .)
    $end            reduce using rule 12 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON .)


state 135

    (18) lista_parametros -> lista_parametros COMMA IDENTIFICADOR SUFIX . tipo_dato
    (23) tipo_dato -> . INT64
    (24) tipo_dato -> . FLOAT64
    (25) tipo_dato -> . BOOL
    (26) tipo_dato -> . CHAR
    (27) tipo_dato -> . STRING
    (28) tipo_dato -> . ARRAY
    (29) tipo_dato -> . NOTHING

    INT64           shift and go to state 101
    FLOAT64         shift and go to state 102
    BOOL            shift and go to state 103
    CHAR            shift and go to state 104
    STRING          shift and go to state 105
    ARRAY           shift and go to state 106
    NOTHING         shift and go to state 107

    tipo_dato                      shift and go to state 139

state 136

    (13) declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON .

    IDENTIFICADOR   reduce using rule 13 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON .)
    FUNCTION        reduce using rule 13 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON .)
    IF              reduce using rule 13 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON .)
    WHILE           reduce using rule 13 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON .)
    FOR             reduce using rule 13 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON .)
    MUTABLE         reduce using rule 13 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON .)
    STRUCT          reduce using rule 13 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON .)
    $end            reduce using rule 13 (declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON .)


state 137

    (15) returnValue -> RETURN expresion SEMICOLON .

    END             reduce using rule 15 (returnValue -> RETURN expresion SEMICOLON .)


state 138

    (11) declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON .

    IDENTIFICADOR   reduce using rule 11 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON .)
    FUNCTION        reduce using rule 11 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON .)
    IF              reduce using rule 11 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON .)
    WHILE           reduce using rule 11 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON .)
    FOR             reduce using rule 11 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON .)
    MUTABLE         reduce using rule 11 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON .)
    STRUCT          reduce using rule 11 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON .)
    $end            reduce using rule 11 (declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON .)


state 139

    (18) lista_parametros -> lista_parametros COMMA IDENTIFICADOR SUFIX tipo_dato .

    RPAR            reduce using rule 18 (lista_parametros -> lista_parametros COMMA IDENTIFICADOR SUFIX tipo_dato .)
    COMMA           reduce using rule 18 (lista_parametros -> lista_parametros COMMA IDENTIFICADOR SUFIX tipo_dato .)

