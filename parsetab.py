
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftDEQUALSDIFFleftGREATERLESSTHANGEQLEQleftANDORleftSUMRESTAleftMULDIVMODrightNOTrightPOTrightUMINUSAND ARRAY BOOL BRACKETA BRACKETC BREAK CHAR CHARLITERAL COMMA CONTINUE DECIMAL DEQUALS DIFF DIV ELSE ELSEIF END ENTERO EQUALS FALSE FLOAT64 FOR FUNCTION GEQ GLOBAL GREATER IDENTIFICADOR IF IN INT64 LEQ LESSTHAN LOCAL LPAR MOD MUL MUTABLE NOT NOTHING OR POT RESTA RETURN RPAR SEMICOLON STRING STRINGLITERAL STRUCT SUFIX SUM TRUE WHILEinicio : instruccionesinstrucciones : instrucciones instruccion \n                     | instruccion\n    instruccion : asignacion\n                   | declareFunction\n                   | callFunction\n                   | condicional\n                   | whileST\n                   | forST\n                   | struct\n\n    declareFunction : FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON\n                       | FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR             END SEMICOLON\n                       | FUNCTION IDENTIFICADOR LPAR                  RPAR returnValue END SEMICOLON\n                       | FUNCTION IDENTIFICADOR LPAR                  RPAR             END SEMICOLON\n    returnValue : RETURN expresion SEMICOLON\n                   | RETURN SEMICOLON \n    lista_parametros : lista_parametros COMMA IDENTIFICADOR \n                        | lista_parametros COMMA IDENTIFICADOR SUFIX tipo_dato\n                        | IDENTIFICADOR SUFIX tipo_dato\n                        | IDENTIFICADOR\n    asignacion : IDENTIFICADOR EQUALS expresion                 SEMICOLON\n                  | IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON\n    tipo_dato : INT64 \n                | FLOAT64 \n                | BOOL \n                | CHAR \n                | STRING \n                | ARRAY \n                | NOTHING  \n    callFunction : IDENTIFICADOR LPAR RPAR SEMICOLON\n                    | IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON\n    condicional : IF expresion                   END SEMICOLON\n                   | IF expresion elseifList        END SEMICOLON\n                   | IF expresion elseifList ELSE   END SEMICOLON\n    elseifList : elseifList ELSEIF expresion\n                  | ELSEIF expresion\n    whileST : WHILE expresion END SEMICOLON\n    forST : FOR IDENTIFICADOR IN expresion END SEMICOLON\n    lista_expresion : lista_expresion COMMA expresion \n                       | expresion\n    struct : MUTABLE STRUCT IDENTIFICADOR END SEMICOLON \n              |         STRUCT IDENTIFICADOR END SEMICOLON \n    expresion : RESTA expresion %prec UMINUS \n                 | NOT expresion\n                 | expresion AND expresion\n                 | expresion OR expresion\n\n                 | expresion SUM expresion \n                 | expresion RESTA expresion\n                 | expresion MUL expresion\n                 | expresion DIV expresion\n                 | expresion POT expresion\n\n                 | expresion DEQUALS expresion\n                 | expresion DIFF expresion\n                 | expresion GREATER expresion\n                 | expresion LESSTHAN expresion\n                 | expresion GEQ expresion\n                 | expresion LEQ expresion\n                 | primitivas\n    primitivas : ENTERO\n                  | DECIMAL\n                  | FALSE \n                  | TRUE\n                  | STRINGLITERAL\n                  | CHARLITERAL\n                  | NOTHING\n                  | BRACKETA BRACKETC\n                  | BRACKETA items BRACKETC\n    items : items COMMA expresion\n             | expresion\n    '
    
_lr_action_items = {'IDENTIFICADOR':([0,2,3,4,5,6,7,8,9,10,12,15,17,18,36,42,68,70,76,96,99,108,112,116,121,122,128,131,132,134,136,138,],[11,11,-3,-4,-5,-6,-7,-8,-9,-10,21,35,37,-2,66,73,-21,-30,-32,-37,-42,-31,126,-33,-41,-22,-14,-34,-38,-12,-13,-11,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,18,68,70,76,96,99,108,116,121,122,128,131,132,134,136,138,],[12,12,-3,-4,-5,-6,-7,-8,-9,-10,-2,-21,-30,-32,-37,-42,-31,-33,-41,-22,-14,-34,-38,-12,-13,-11,]),'IF':([0,2,3,4,5,6,7,8,9,10,18,68,70,76,96,99,108,116,121,122,128,131,132,134,136,138,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-2,-21,-30,-32,-37,-42,-31,-33,-41,-22,-14,-34,-38,-12,-13,-11,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,18,68,70,76,96,99,108,116,121,122,128,131,132,134,136,138,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-2,-21,-30,-32,-37,-42,-31,-33,-41,-22,-14,-34,-38,-12,-13,-11,]),'FOR':([0,2,3,4,5,6,7,8,9,10,18,68,70,76,96,99,108,116,121,122,128,131,132,134,136,138,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-2,-21,-30,-32,-37,-42,-31,-33,-41,-22,-14,-34,-38,-12,-13,-11,]),'MUTABLE':([0,2,3,4,5,6,7,8,9,10,18,68,70,76,96,99,108,116,121,122,128,131,132,134,136,138,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-2,-21,-30,-32,-37,-42,-31,-33,-41,-22,-14,-34,-38,-12,-13,-11,]),'STRUCT':([0,2,3,4,5,6,7,8,9,10,16,18,68,70,76,96,99,108,116,121,122,128,131,132,134,136,138,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,36,-2,-21,-30,-32,-37,-42,-31,-33,-41,-22,-14,-34,-38,-12,-13,-11,]),'$end':([1,2,3,4,5,6,7,8,9,10,18,68,70,76,96,99,108,116,121,122,128,131,132,134,136,138,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-2,-21,-30,-32,-37,-42,-31,-33,-41,-22,-14,-34,-38,-12,-13,-11,]),'EQUALS':([11,],[19,]),'LPAR':([11,21,],[20,42,]),'RESTA':([13,14,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,38,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,72,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,109,115,118,119,129,],[23,23,23,23,48,23,23,-58,-59,-60,-61,-62,-63,-64,-65,23,48,48,48,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-43,-44,-66,48,23,23,23,48,48,-47,-48,-49,-50,-51,48,48,48,48,48,48,48,-67,23,48,48,23,48,48,48,]),'NOT':([13,14,19,20,23,24,33,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,72,79,95,115,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'ENTERO':([13,14,19,20,23,24,33,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,72,79,95,115,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'DECIMAL':([13,14,19,20,23,24,33,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,72,79,95,115,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'FALSE':([13,14,19,20,23,24,33,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,72,79,95,115,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'TRUE':([13,14,19,20,23,24,33,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,72,79,95,115,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'STRINGLITERAL':([13,14,19,20,23,24,33,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,72,79,95,115,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'CHARLITERAL':([13,14,19,20,23,24,33,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,72,79,95,115,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'NOTHING':([13,14,19,20,23,24,33,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,69,72,79,95,110,115,135,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,107,32,32,32,107,32,107,]),'BRACKETA':([13,14,19,20,23,24,33,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,72,79,95,115,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'RPAR':([20,25,26,27,28,29,30,31,32,40,41,42,59,60,61,73,74,80,81,82,83,84,85,86,87,88,89,90,91,92,94,101,102,103,104,105,106,107,109,123,126,139,],[39,-58,-59,-60,-61,-62,-63,-64,-65,71,-40,75,-43,-44,-66,-20,111,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-67,-23,-24,-25,-26,-27,-28,-29,-39,-19,-17,-18,]),'END':([22,25,26,27,28,29,30,31,32,34,37,44,59,60,61,66,75,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,111,113,118,124,130,137,],[43,-58,-59,-60,-61,-62,-63,-64,-65,64,67,77,-43,-44,-66,98,114,117,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-36,-67,120,125,127,-35,133,-16,-15,]),'AND':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[45,-58,-59,-60,-61,-62,-63,-64,-65,45,45,45,-43,-44,-66,45,-45,-46,-47,-48,-49,-50,-51,45,45,45,45,45,45,45,-67,45,45,45,45,45,]),'OR':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[46,-58,-59,-60,-61,-62,-63,-64,-65,46,46,46,-43,-44,-66,46,-45,-46,-47,-48,-49,-50,-51,46,46,46,46,46,46,46,-67,46,46,46,46,46,]),'SUM':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[47,-58,-59,-60,-61,-62,-63,-64,-65,47,47,47,-43,-44,-66,47,47,47,-47,-48,-49,-50,-51,47,47,47,47,47,47,47,-67,47,47,47,47,47,]),'MUL':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[49,-58,-59,-60,-61,-62,-63,-64,-65,49,49,49,-43,-44,-66,49,49,49,49,49,-49,-50,-51,49,49,49,49,49,49,49,-67,49,49,49,49,49,]),'DIV':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[50,-58,-59,-60,-61,-62,-63,-64,-65,50,50,50,-43,-44,-66,50,50,50,50,50,-49,-50,-51,50,50,50,50,50,50,50,-67,50,50,50,50,50,]),'POT':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[51,-58,-59,-60,-61,-62,-63,-64,-65,51,51,51,-43,51,-66,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-67,51,51,51,51,51,]),'DEQUALS':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[52,-58,-59,-60,-61,-62,-63,-64,-65,52,52,52,-43,-44,-66,52,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,52,-67,52,52,52,52,52,]),'DIFF':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[53,-58,-59,-60,-61,-62,-63,-64,-65,53,53,53,-43,-44,-66,53,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,53,-67,53,53,53,53,53,]),'GREATER':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[54,-58,-59,-60,-61,-62,-63,-64,-65,54,54,54,-43,-44,-66,54,-45,-46,-47,-48,-49,-50,-51,54,54,-54,-55,-56,-57,54,-67,54,54,54,54,54,]),'LESSTHAN':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[55,-58,-59,-60,-61,-62,-63,-64,-65,55,55,55,-43,-44,-66,55,-45,-46,-47,-48,-49,-50,-51,55,55,-54,-55,-56,-57,55,-67,55,55,55,55,55,]),'GEQ':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[56,-58,-59,-60,-61,-62,-63,-64,-65,56,56,56,-43,-44,-66,56,-45,-46,-47,-48,-49,-50,-51,56,56,-54,-55,-56,-57,56,-67,56,56,56,56,56,]),'LEQ':([22,25,26,27,28,29,30,31,32,34,38,41,59,60,61,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,109,118,119,129,],[57,-58,-59,-60,-61,-62,-63,-64,-65,57,57,57,-43,-44,-66,57,-45,-46,-47,-48,-49,-50,-51,57,57,-54,-55,-56,-57,57,-67,57,57,57,57,57,]),'ELSEIF':([22,25,26,27,28,29,30,31,32,44,59,60,61,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,118,],[58,-58,-59,-60,-61,-62,-63,-64,-65,79,-43,-44,-66,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-36,-67,-35,]),'SEMICOLON':([25,26,27,28,29,30,31,32,38,39,43,59,60,61,64,67,71,77,80,81,82,83,84,85,86,87,88,89,90,91,92,94,98,100,101,102,103,104,105,106,107,114,115,117,120,125,127,129,133,],[-58,-59,-60,-61,-62,-63,-64,-65,68,70,76,-43,-44,-66,96,99,108,116,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-67,121,122,-23,-24,-25,-26,-27,-28,-29,128,130,131,132,134,136,137,138,]),'SUFIX':([25,26,27,28,29,30,31,32,38,59,60,61,73,80,81,82,83,84,85,86,87,88,89,90,91,92,94,126,],[-58,-59,-60,-61,-62,-63,-64,-65,69,-43,-44,-66,110,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-67,135,]),'COMMA':([25,26,27,28,29,30,31,32,40,41,59,60,61,62,63,73,74,80,81,82,83,84,85,86,87,88,89,90,91,92,94,101,102,103,104,105,106,107,109,119,123,126,139,],[-58,-59,-60,-61,-62,-63,-64,-65,72,-40,-43,-44,-66,95,-69,-20,112,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-67,-23,-24,-25,-26,-27,-28,-29,-39,-68,-19,-17,-18,]),'BRACKETC':([25,26,27,28,29,30,31,32,33,59,60,61,62,63,80,81,82,83,84,85,86,87,88,89,90,91,92,94,119,],[-58,-59,-60,-61,-62,-63,-64,-65,61,-43,-44,-66,94,-69,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-67,-68,]),'ELSE':([25,26,27,28,29,30,31,32,44,59,60,61,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,118,],[-58,-59,-60,-61,-62,-63,-64,-65,78,-43,-44,-66,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-36,-67,-35,]),'IN':([35,],[65,]),'INT64':([69,110,135,],[101,101,101,]),'FLOAT64':([69,110,135,],[102,102,102,]),'BOOL':([69,110,135,],[103,103,103,]),'CHAR':([69,110,135,],[104,104,104,]),'STRING':([69,110,135,],[105,105,105,]),'ARRAY':([69,110,135,],[106,106,106,]),'RETURN':([75,111,],[115,115,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'inicio':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,18,]),'asignacion':([0,2,],[4,4,]),'declareFunction':([0,2,],[5,5,]),'callFunction':([0,2,],[6,6,]),'condicional':([0,2,],[7,7,]),'whileST':([0,2,],[8,8,]),'forST':([0,2,],[9,9,]),'struct':([0,2,],[10,10,]),'expresion':([13,14,19,20,23,24,33,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,72,79,95,115,],[22,34,38,41,59,60,63,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,109,118,119,129,]),'primitivas':([13,14,19,20,23,24,33,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,72,79,95,115,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'lista_expresion':([20,],[40,]),'elseifList':([22,],[44,]),'items':([33,],[62,]),'lista_parametros':([42,],[74,]),'tipo_dato':([69,110,135,],[100,123,139,]),'returnValue':([75,111,],[113,124,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> inicio","S'",1,None,None,None),
  ('inicio -> instrucciones','inicio',1,'p_inicio','gramatica.py',140),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones','gramatica.py',143),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','gramatica.py',144),
  ('instruccion -> asignacion','instruccion',1,'p_instruccion','gramatica.py',148),
  ('instruccion -> declareFunction','instruccion',1,'p_instruccion','gramatica.py',149),
  ('instruccion -> callFunction','instruccion',1,'p_instruccion','gramatica.py',150),
  ('instruccion -> condicional','instruccion',1,'p_instruccion','gramatica.py',151),
  ('instruccion -> whileST','instruccion',1,'p_instruccion','gramatica.py',152),
  ('instruccion -> forST','instruccion',1,'p_instruccion','gramatica.py',153),
  ('instruccion -> struct','instruccion',1,'p_instruccion','gramatica.py',154),
  ('declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR returnValue END SEMICOLON','declareFunction',8,'p_declareFunction','gramatica.py',159),
  ('declareFunction -> FUNCTION IDENTIFICADOR LPAR lista_parametros RPAR END SEMICOLON','declareFunction',7,'p_declareFunction','gramatica.py',160),
  ('declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR returnValue END SEMICOLON','declareFunction',7,'p_declareFunction','gramatica.py',161),
  ('declareFunction -> FUNCTION IDENTIFICADOR LPAR RPAR END SEMICOLON','declareFunction',6,'p_declareFunction','gramatica.py',162),
  ('returnValue -> RETURN expresion SEMICOLON','returnValue',3,'p_returnValue','gramatica.py',167),
  ('returnValue -> RETURN SEMICOLON','returnValue',2,'p_returnValue','gramatica.py',168),
  ('lista_parametros -> lista_parametros COMMA IDENTIFICADOR','lista_parametros',3,'p_lista_parametros','gramatica.py',172),
  ('lista_parametros -> lista_parametros COMMA IDENTIFICADOR SUFIX tipo_dato','lista_parametros',5,'p_lista_parametros','gramatica.py',173),
  ('lista_parametros -> IDENTIFICADOR SUFIX tipo_dato','lista_parametros',3,'p_lista_parametros','gramatica.py',174),
  ('lista_parametros -> IDENTIFICADOR','lista_parametros',1,'p_lista_parametros','gramatica.py',175),
  ('asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON','asignacion',4,'p_asignacion','gramatica.py',178),
  ('asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON','asignacion',6,'p_asignacion','gramatica.py',179),
  ('tipo_dato -> INT64','tipo_dato',1,'p_tipo_dato','gramatica.py',183),
  ('tipo_dato -> FLOAT64','tipo_dato',1,'p_tipo_dato','gramatica.py',184),
  ('tipo_dato -> BOOL','tipo_dato',1,'p_tipo_dato','gramatica.py',185),
  ('tipo_dato -> CHAR','tipo_dato',1,'p_tipo_dato','gramatica.py',186),
  ('tipo_dato -> STRING','tipo_dato',1,'p_tipo_dato','gramatica.py',187),
  ('tipo_dato -> ARRAY','tipo_dato',1,'p_tipo_dato','gramatica.py',188),
  ('tipo_dato -> NOTHING','tipo_dato',1,'p_tipo_dato','gramatica.py',189),
  ('callFunction -> IDENTIFICADOR LPAR RPAR SEMICOLON','callFunction',4,'p_callFunction','gramatica.py',193),
  ('callFunction -> IDENTIFICADOR LPAR lista_expresion RPAR SEMICOLON','callFunction',5,'p_callFunction','gramatica.py',194),
  ('condicional -> IF expresion END SEMICOLON','condicional',4,'p_condicional','gramatica.py',199),
  ('condicional -> IF expresion elseifList END SEMICOLON','condicional',5,'p_condicional','gramatica.py',200),
  ('condicional -> IF expresion elseifList ELSE END SEMICOLON','condicional',6,'p_condicional','gramatica.py',201),
  ('elseifList -> elseifList ELSEIF expresion','elseifList',3,'p_elseifList','gramatica.py',205),
  ('elseifList -> ELSEIF expresion','elseifList',2,'p_elseifList','gramatica.py',206),
  ('whileST -> WHILE expresion END SEMICOLON','whileST',4,'p_whileST','gramatica.py',210),
  ('forST -> FOR IDENTIFICADOR IN expresion END SEMICOLON','forST',6,'p_forST','gramatica.py',213),
  ('lista_expresion -> lista_expresion COMMA expresion','lista_expresion',3,'p_lista_expresion','gramatica.py',217),
  ('lista_expresion -> expresion','lista_expresion',1,'p_lista_expresion','gramatica.py',218),
  ('struct -> MUTABLE STRUCT IDENTIFICADOR END SEMICOLON','struct',5,'p_struct','gramatica.py',223),
  ('struct -> STRUCT IDENTIFICADOR END SEMICOLON','struct',4,'p_struct','gramatica.py',224),
  ('expresion -> RESTA expresion','expresion',2,'p_expresion','gramatica.py',228),
  ('expresion -> NOT expresion','expresion',2,'p_expresion','gramatica.py',229),
  ('expresion -> expresion AND expresion','expresion',3,'p_expresion','gramatica.py',230),
  ('expresion -> expresion OR expresion','expresion',3,'p_expresion','gramatica.py',231),
  ('expresion -> expresion SUM expresion','expresion',3,'p_expresion','gramatica.py',233),
  ('expresion -> expresion RESTA expresion','expresion',3,'p_expresion','gramatica.py',234),
  ('expresion -> expresion MUL expresion','expresion',3,'p_expresion','gramatica.py',235),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion','gramatica.py',236),
  ('expresion -> expresion POT expresion','expresion',3,'p_expresion','gramatica.py',237),
  ('expresion -> expresion DEQUALS expresion','expresion',3,'p_expresion','gramatica.py',239),
  ('expresion -> expresion DIFF expresion','expresion',3,'p_expresion','gramatica.py',240),
  ('expresion -> expresion GREATER expresion','expresion',3,'p_expresion','gramatica.py',241),
  ('expresion -> expresion LESSTHAN expresion','expresion',3,'p_expresion','gramatica.py',242),
  ('expresion -> expresion GEQ expresion','expresion',3,'p_expresion','gramatica.py',243),
  ('expresion -> expresion LEQ expresion','expresion',3,'p_expresion','gramatica.py',244),
  ('expresion -> primitivas','expresion',1,'p_expresion','gramatica.py',245),
  ('primitivas -> ENTERO','primitivas',1,'p_primitivas','gramatica.py',249),
  ('primitivas -> DECIMAL','primitivas',1,'p_primitivas','gramatica.py',250),
  ('primitivas -> FALSE','primitivas',1,'p_primitivas','gramatica.py',251),
  ('primitivas -> TRUE','primitivas',1,'p_primitivas','gramatica.py',252),
  ('primitivas -> STRINGLITERAL','primitivas',1,'p_primitivas','gramatica.py',253),
  ('primitivas -> CHARLITERAL','primitivas',1,'p_primitivas','gramatica.py',254),
  ('primitivas -> NOTHING','primitivas',1,'p_primitivas','gramatica.py',255),
  ('primitivas -> BRACKETA BRACKETC','primitivas',2,'p_primitivas','gramatica.py',256),
  ('primitivas -> BRACKETA items BRACKETC','primitivas',3,'p_primitivas','gramatica.py',257),
  ('items -> items COMMA expresion','items',3,'p_items','gramatica.py',261),
  ('items -> expresion','items',1,'p_items','gramatica.py',262),
]
