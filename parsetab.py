
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSUMRESTAleftMULDIVARRAY BOOL CHAR DECIMAL DIV ENTERO EQUALS FLOAT64 IDENTIFICADOR INT64 MUL NOTHING RESTA SEMICOLON STRING SUFIX SUMinicio : instruccionesinstrucciones : instrucciones instruccion \n                     | instruccion\n    instruccion : asignacion\n    asignacion : IDENTIFICADOR EQUALS expresion                 SEMICOLON\n                  | IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON\n    tipo_dato : INT64 \n                | FLOAT64 \n                | BOOL \n                | CHAR \n                | STRING \n                | ARRAY \n                | NOTHING  \n    expresion : expresion SUM expresion \n                | expresion RESTA expresion\n                | expresion MUL expresion\n                | expresion DIV expresion\n                | ENTERO\n    '
    
_lr_action_items = {'IDENTIFICADOR':([0,2,3,4,6,10,28,],[5,5,-3,-4,-2,-5,-6,]),'$end':([1,2,3,4,6,10,28,],[0,-1,-3,-4,-2,-5,-6,]),'EQUALS':([5,],[7,]),'ENTERO':([7,12,13,14,15,],[9,9,9,9,9,]),'SEMICOLON':([8,9,16,17,18,19,20,21,22,23,24,25,26,27,],[10,-18,28,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,]),'SUFIX':([8,9,24,25,26,27,],[11,-18,-14,-15,-16,-17,]),'SUM':([8,9,24,25,26,27,],[12,-18,-14,-15,-16,-17,]),'RESTA':([8,9,24,25,26,27,],[13,-18,-14,-15,-16,-17,]),'MUL':([8,9,24,25,26,27,],[14,-18,14,14,-16,-17,]),'DIV':([8,9,24,25,26,27,],[15,-18,15,15,-16,-17,]),'INT64':([11,],[17,]),'FLOAT64':([11,],[18,]),'BOOL':([11,],[19,]),'CHAR':([11,],[20,]),'STRING':([11,],[21,]),'ARRAY':([11,],[22,]),'NOTHING':([11,],[23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'inicio':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,6,]),'asignacion':([0,2,],[4,4,]),'expresion':([7,12,13,14,15,],[8,24,25,26,27,]),'tipo_dato':([11,],[16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> inicio","S'",1,None,None,None),
  ('inicio -> instrucciones','inicio',1,'p_inicio','gramatica.py',85),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones','gramatica.py',88),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','gramatica.py',89),
  ('instruccion -> asignacion','instruccion',1,'p_instruccion','gramatica.py',93),
  ('asignacion -> IDENTIFICADOR EQUALS expresion SEMICOLON','asignacion',4,'p_asignacion','gramatica.py',97),
  ('asignacion -> IDENTIFICADOR EQUALS expresion SUFIX tipo_dato SEMICOLON','asignacion',6,'p_asignacion','gramatica.py',98),
  ('tipo_dato -> INT64','tipo_dato',1,'p_tipo_dato','gramatica.py',102),
  ('tipo_dato -> FLOAT64','tipo_dato',1,'p_tipo_dato','gramatica.py',103),
  ('tipo_dato -> BOOL','tipo_dato',1,'p_tipo_dato','gramatica.py',104),
  ('tipo_dato -> CHAR','tipo_dato',1,'p_tipo_dato','gramatica.py',105),
  ('tipo_dato -> STRING','tipo_dato',1,'p_tipo_dato','gramatica.py',106),
  ('tipo_dato -> ARRAY','tipo_dato',1,'p_tipo_dato','gramatica.py',107),
  ('tipo_dato -> NOTHING','tipo_dato',1,'p_tipo_dato','gramatica.py',108),
  ('expresion -> expresion SUM expresion','expresion',3,'p_expresion','gramatica.py',112),
  ('expresion -> expresion RESTA expresion','expresion',3,'p_expresion','gramatica.py',113),
  ('expresion -> expresion MUL expresion','expresion',3,'p_expresion','gramatica.py',114),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion','gramatica.py',115),
  ('expresion -> ENTERO','expresion',1,'p_expresion','gramatica.py',116),
]
